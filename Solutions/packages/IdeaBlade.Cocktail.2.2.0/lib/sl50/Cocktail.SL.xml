<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cocktail.SL</name>
    </assembly>
    <members>
        <member name="T:Cocktail.IAuthenticationServiceConfigurator">
            <summary>
              Interface used to configure the AuthenticationService
            </summary>
        </member>
        <member name="M:Cocktail.IAuthenticationServiceConfigurator.WithConnectionOptions(System.String)">
            <summary>
              Configures the name of the <see cref="T:Cocktail.ConnectionOptions"/> to be used.
            </summary>
            <param name="connectionOptionsName"> The name of the ConnectionOptions. </param>
        </member>
        <member name="T:Cocktail.AuthenticationService">
            <summary>
              Default implementation of an authentication service. Subclass if different behavior is desired, otherwise use as-is.
            </summary>
            <example>
              <code title="Example" description="Demonstrates how to enable the authentication service in an application. " lang="CS">public class AppBootstrapper : FrameworkBootstrapper&lt;MainFrameViewModel&gt;
                {
                protected override void PrepareCompositionContainer(CompositionBatch batch)
                {
                base.PrepareCompositionContainer(batch);
             
                // Inject the authentication service into the framework.
                batch.AddExportedValue&lt;IAuthenticationService&gt;(new AuthenticationService());
                }
                }</code>
            </example>
        </member>
        <member name="T:Cocktail.IAuthenticationService">
            <summary>Interface identifying an authentication service. If present, entity manager providers will use the authentication service to link the
            credentials between multiple entity managers.</summary>
            <example>
            	<code title="Example" description="Demonstrates how to enable the authentication service in an application." lang="CS">
            public class AppBootstrapper : FrameworkBootstrapper&lt;MainFrameViewModel&gt;
            {
                protected override void PrepareCompositionContainer(CompositionBatch batch)
                {
                    base.PrepareCompositionContainer(batch);
             
                    // Inject the authentication service into the framework.
                    batch.AddExportedValue&lt;IAuthenticationService&gt;(new AuthenticationService&lt;NorthwindIBEntities&gt;());
                }
            }</code>
            </example>
        </member>
        <member name="M:Cocktail.IAuthenticationService.LoginAsync(IdeaBlade.EntityModel.ILoginCredential)">
            <summary>Login with the supplied credential.</summary>
            <param name="credential">The supplied credential.</param>
        </member>
        <member name="M:Cocktail.IAuthenticationService.LoginAsync(IdeaBlade.EntityModel.ILoginCredential,System.Threading.CancellationToken)">
            <summary>Login with the supplied credential.</summary>
            <param name="credential">The supplied credential.</param>
            <param name="cancellationToken">A token that allows for the operation to be cancelled.</param>
        </member>
        <member name="M:Cocktail.IAuthenticationService.LogoutAsync">
            <summary>Logs out the current user.</summary>
        </member>
        <member name="M:Cocktail.IAuthenticationService.LogoutAsync(System.Threading.CancellationToken)">
            <summary>Logs out the current user.</summary>
            <param name="cancellationToken">A token that allows for the operation to be cancelled.</param>
        </member>
        <member name="P:Cocktail.IAuthenticationService.Principal">
            <summary>
            Returns the <see cref="T:System.Security.Principal.IPrincipal"/> representing the current user.
            </summary>
            <value>Returns the current principal or null if not logged in.</value>
        </member>
        <member name="P:Cocktail.IAuthenticationService.IsLoggedIn">
            <summary>Returns whether the user is logged in.</summary>
            <value>Returns true if user is logged in.</value>
        </member>
        <member name="P:Cocktail.IAuthenticationService.AuthenticationContext">
            <summary>
            Returns the current DevForce AuthenticationContext.
            </summary>
        </member>
        <member name="P:Cocktail.IAuthenticationService.ConnectionOptions">
            <summary>
            Specifies the ConnectionOptions used by the current AuthenticationService.
            </summary>
        </member>
        <member name="E:Cocktail.IAuthenticationService.LoggedIn">
            <summary>Signals that a user successfully logged in.</summary>
        </member>
        <member name="E:Cocktail.IAuthenticationService.LoggedOut">
            <summary>Signals that a user successfully logged out.</summary>
        </member>
        <member name="E:Cocktail.IAuthenticationService.PrincipalChanged">
            <summary>
            Signals that the principal has changed due to a login or logout.
            </summary>
        </member>
        <member name="M:Cocktail.AuthenticationService.#ctor">
            <summary>
              Creates a new AuthenticationService instance.
            </summary>
        </member>
        <member name="M:Cocktail.AuthenticationService.LoginAsync(IdeaBlade.EntityModel.ILoginCredential)">
            <summary>
              Login with the supplied credential.
            </summary>
            <param name="credential">
              <para> The supplied credential. </para>
            </param>
        </member>
        <member name="M:Cocktail.AuthenticationService.LoginAsync(IdeaBlade.EntityModel.ILoginCredential,System.Threading.CancellationToken)">
            <summary>
              Login with the supplied credential.
            </summary>
            <param name="credential"> The supplied credential. </param>
            <param name="cancellationToken"> A token that allows for the operation to be cancelled. </param>
        </member>
        <member name="M:Cocktail.AuthenticationService.LogoutAsync">
            <summary>
              Logs out the current user.
            </summary>
        </member>
        <member name="M:Cocktail.AuthenticationService.LogoutAsync(System.Threading.CancellationToken)">
            <summary>
              Logs out the current user.
            </summary>
            <param name="cancellationToken"> A token that allows for the operation to be cancelled. </param>
        </member>
        <member name="M:Cocktail.AuthenticationService.Configure(System.Action{Cocktail.IAuthenticationServiceConfigurator})">
            <summary>
              Configures the current AuthenticationService.
            </summary>
            <param name="configure"> Delegate to perform the configuration. </param>
        </member>
        <member name="M:Cocktail.AuthenticationService.NotifyPropertyChanged(System.String)">
            <summary>
              Internal use.
            </summary>
        </member>
        <member name="M:Cocktail.AuthenticationService.OnLoggedIn">
            <summary>
              Triggers the LoggedIn event.
            </summary>
        </member>
        <member name="M:Cocktail.AuthenticationService.OnLoggedOut">
            <summary>
              Triggers the LoggedOut event.
            </summary>
        </member>
        <member name="M:Cocktail.AuthenticationService.OnPrincipalChanged">
            <summary>
              Triggers the PrincipalChanged event.
            </summary>
        </member>
        <member name="P:Cocktail.AuthenticationService.Principal">
            <summary>
              Returns the <see cref="T:System.Security.Principal.IPrincipal"/> representing the current user.
            </summary>
            <value> Returns the current principal or null if not logged in. </value>
        </member>
        <member name="P:Cocktail.AuthenticationService.IsLoggedIn">
            <summary>
              Returns whether the user is logged in.
            </summary>
            <value> Returns true if user is logged in. </value>
        </member>
        <member name="P:Cocktail.AuthenticationService.AuthenticationContext">
            <summary>
              Returns the current DevForce AuthenticationContext.
            </summary>
        </member>
        <member name="P:Cocktail.AuthenticationService.ConnectionOptions">
            <summary>
              Specifies the <see cref="P:Cocktail.IEntityManagerProvider.ConnectionOptions"/> used by the current AuthenticationService.
            </summary>
        </member>
        <member name="E:Cocktail.AuthenticationService.LoggedIn">
            <summary>
              Signals that a user successfully logged in.
            </summary>
        </member>
        <member name="E:Cocktail.AuthenticationService.LoggedOut">
            <summary>
              Signals that a user successfully logged out.
            </summary>
        </member>
        <member name="E:Cocktail.AuthenticationService.PrincipalChanged">
            <summary>
              Signals that the principal has changed due to a login or logout.
            </summary>
        </member>
        <member name="E:Cocktail.AuthenticationService.PropertyChanged">
            <summary>
              Notifies of changed properties.
            </summary>
        </member>
        <member name="T:Cocktail.AnonymousAuthenticationContext">
            <summary>
              A singleton implementation of the AuthenticationContext for an anonymous user.
            </summary>
        </member>
        <member name="M:Cocktail.AnonymousAuthenticationContext.#ctor">
            <summary>
              Creates a new AnonymousAuthenticationContext.
            </summary>
        </member>
        <member name="P:Cocktail.AnonymousAuthenticationContext.Instance">
            <summary>
              Returns the current instance.
            </summary>
        </member>
        <member name="P:Cocktail.AnonymousAuthenticationContext.SessionKey">
            <summary>
              Token uniquely identifying a user session to the Entity Server.
            </summary>
        </member>
        <member name="P:Cocktail.AnonymousAuthenticationContext.Principal">
            <summary>
              The <see cref="T:System.Security.Principal.IPrincipal" /> representing the logged in user.
            </summary>
        </member>
        <member name="P:Cocktail.AnonymousAuthenticationContext.LoginState">
            <summary>
              Returns whether this context is logged in.
            </summary>
        </member>
        <member name="P:Cocktail.AnonymousAuthenticationContext.ExtendedPropertyMap">
            <summary>
              Additional properties.
            </summary>
        </member>
        <member name="T:Cocktail.BinaryToImageSourceConverter">
            <summary>Converts a byte array of image data to an image source.</summary>
            <remarks>This implementation only tolerates jpeg and pngs</remarks>
        </member>
        <member name="M:Cocktail.BinaryToImageSourceConverter.RegisterConvention">
            <summary>
            Register this instance with <see cref="T:Cocktail.ValueConverterConventionRegistry"/>
            </summary>
        </member>
        <member name="M:Cocktail.BinaryToImageSourceConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>Converts a byte array of image data to an image source.</summary>
        </member>
        <member name="M:Cocktail.BinaryToImageSourceConverter.System#Windows#Data#IValueConverter#ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>Conversion from image to byte array is not implemented.</summary>
        </member>
        <member name="T:Cocktail.BusyWatcher">
            <summary>A service to manage a busy indicator</summary>
            <example>
            	<code title="Example 1" description="Demonstrates using the BusyWatcher in a ViewModel." lang="C#">
            public class LoginViewModel
            {
                public LoginViewModel()
                {
                    Busy = new BusyWatcher();
                }
             
                public IBusyWatcher Busy { get; private set; }
             
                public async void Login()
                {
                    using (Busy.GetTicket())
                    {
                        // Snip .. removed for clarity
                        await _authenticationService.LoginAsync(credential);
             
                        if (_authenticationService.IsLoggedIn)
                            TryClose();
                    }
                }
            }</code>
            	<code title="Example 2" description="Demonstrates binding to the BusyWatcher." lang="XAML">
            &lt;toolkit:BusyIndicator BorderBrush="#FF1D5380" IsBusy="{Binding Busy.IsBusy}"&gt;
                &lt;toolkit:BusyIndicator.BusyContent&gt;
                    &lt;TextBlock Text="Please wait" /&gt;
                &lt;/toolkit:BusyIndicator.BusyContent&gt;
             
            &lt;/toolkit:BusyIndicator&gt;
            </code>
            </example>
        </member>
        <member name="T:Cocktail.IBusyWatcher">
            <summary>
            A service to manage a busy indicator
            </summary>
        </member>
        <member name="M:Cocktail.IBusyWatcher.GetTicket">
            <summary>
            Returns a disposable ticket to manage busy state around a using() scope.
            </summary>
            <returns>Ticket implementing IDisposable.</returns>
            <remarks>
            The internal busy indicator is incremented by calling this method and as soon as the Dispose()
            method is called on the ticket, the internal busy counter is decremented.
            </remarks>
        </member>
        <member name="M:Cocktail.IBusyWatcher.AddWatch">
            <summary>
            Increments the internal busy counter.
            </summary>
        </member>
        <member name="M:Cocktail.IBusyWatcher.RemoveWatch">
            <summary>
            Decrements the internal busy counter.
            </summary>
        </member>
        <member name="P:Cocktail.IBusyWatcher.IsBusy">
            <summary>
            Returns true if the state of the BusyWatcher is currently busy. This property can be directly bound
            to a busy indicator control in XAML.
            </summary>
            <remarks>IsBusy is true as long as the internal busy counter is greater than zero.</remarks>
        </member>
        <member name="M:Cocktail.BusyWatcher.GetTicket">
            <summary>
            Returns a disposable ticket to manage busy state around a using() scope.
            </summary>
            <returns>Ticket implementing IDisposable.</returns>
            <remarks>
            The internal busy indicator is incremented by calling this method and as soon as the Dispose()
            method is called on the ticket, the internal busy counter is decremented.
            </remarks>
        </member>
        <member name="M:Cocktail.BusyWatcher.AddWatch">
            <summary>
            Increments the internal busy counter.
            </summary>
        </member>
        <member name="M:Cocktail.BusyWatcher.RemoveWatch">
            <summary>
            Decrements the internal busy counter.
            </summary>
        </member>
        <member name="P:Cocktail.BusyWatcher.IsBusy">
            <summary>
            Returns true if the state of the BusyWatcher is currently busy. This property can be directly bound
            to a busy indicator control in XAML.
            </summary>
            <remarks>IsBusy is true as long as the internal busy counter is greater than zero.</remarks>
        </member>
        <member name="T:Cocktail.BusyWatcher.BusyWatcherTicket">
            <summary>A disposable ticket controlling busy state around a scope.</summary>
        </member>
        <member name="M:Cocktail.BusyWatcher.BusyWatcherTicket.#ctor(Cocktail.IBusyWatcher)">
            <summary>
            Initializes a new BusyWatcherTicket instance.
            </summary>
            <param name="parent">The BusyWatcher owning the ticket.</param>
        </member>
        <member name="M:Cocktail.BusyWatcher.BusyWatcherTicket.Dispose">
            <summary>
            Decrements the internal busy counter of the associated busy watcher.
            </summary>
            <remarks>Do not call more than once per ticket.</remarks>
        </member>
        <member name="T:Cocktail.CocktailBootstrapper">
            <summary>
              Abstract base class to configure the framework.
            </summary>
        </member>
        <member name="M:Cocktail.CocktailBootstrapper.#cctor">
            <summary>
              Static initialization
            </summary>
        </member>
        <member name="M:Cocktail.CocktailBootstrapper.#ctor(System.Boolean)">
            <summary>
              Creates an instance of CocktailBootstrapper.
            </summary>
            <param name="useApplication"> Optionally specify if the bootstrapper should hook into the application object. </param>
        </member>
        <member name="M:Cocktail.CocktailBootstrapper.Configure">
            <summary>
              Configures the framework and sets up the IoC container.
            </summary>
        </member>
        <member name="M:Cocktail.CocktailBootstrapper.AddValueConverterConventions">
            <summary>
              Adds the stock <see cref="T:Cocktail.ValueConverterConvention"/>s to the
              <see cref="T:Cocktail.ValueConverterConventionRegistry"/> and thus to the
              Caliburn <see cref="T:Caliburn.Micro.ConventionManager"/>.
            </summary>
        </member>
        <member name="M:Cocktail.CocktailBootstrapper.StartRuntime">
            <summary>
              Called by the bootstrapper's constructor at runtime to start the framework.
            </summary>
        </member>
        <member name="M:Cocktail.CocktailBootstrapper.StartRuntimeAsync">
            <summary>
              Provides an opportunity to perform asynchronous configuration at runtime.
            </summary>
        </member>
        <member name="M:Cocktail.CocktailBootstrapper.WhenCompleted(System.Action)">
            <summary>
              Calls action when <see cref="M:Cocktail.CocktailBootstrapper.StartRuntimeAsync"/> completes.
            </summary>
            <param name="completedAction"> Action to be performed when configuration completes. </param>
        </member>
        <member name="M:Cocktail.CocktailBootstrapper.GetInstance(System.Type,System.String)">
            <summary>
              Locates the supplied service.
            </summary>
            <param name="serviceType"> The service to locate. </param>
            <param name="key"> The key to locate. </param>
            <returns> The located service. </returns>
        </member>
        <member name="M:Cocktail.CocktailBootstrapper.GetAllInstances(System.Type)">
            <summary>
              Locates all instances of the supplied service.
            </summary>
            <param name="serviceType"> The service to locate. </param>
            <returns> The located services. </returns>
        </member>
        <member name="M:Cocktail.CocktailBootstrapper.BuildUp(System.Object)">
            <summary>
              Performs injection on the supplied instance.
            </summary>
            <param name="instance"> The instance to perform injection on. </param>
        </member>
        <member name="T:Cocktail.CocktailMefBootstrapper">
            <summary>
              Abstract base class to configure the framework to use MEF as the application's IoC container.
            </summary>
        </member>
        <member name="M:Cocktail.CocktailMefBootstrapper.#cctor">
            <summary>
              Static initialization
            </summary>
        </member>
        <member name="M:Cocktail.CocktailMefBootstrapper.#ctor(System.Boolean)">
            <summary>
              Creates an instance of CocktailMefBootstrapper.
            </summary>
            <param name="useApplication"> Optionally specify if the bootstrapper should hook into the application object. </param>
        </member>
        <member name="M:Cocktail.CocktailMefBootstrapper.PrepareCompositionContainer(System.ComponentModel.Composition.Hosting.CompositionBatch)">
            <summary>
              Override to add additional exports to the CompositionHost during configuration.
            </summary>
            <param name="batch"> The composition batch to add to. </param>
        </member>
        <member name="M:Cocktail.CocktailMefBootstrapper.PrepareCompositionCatalog">
            <summary>
              Override to substitute the default composition catalog with a custom catalog.
            </summary>
            <returns> Return the custom catalog that should be used by Cocktail to get access to MEF exports. </returns>
        </member>
        <member name="M:Cocktail.CocktailMefBootstrapper.Configure">
            <summary>
              Configures the framework and sets up the IoC container.
            </summary>
        </member>
        <member name="M:Cocktail.CocktailMefBootstrapper.EnsureBootstrapperHasNoExports">
            <summary>
              Ensures that no MEF ExportAttributes are used in the Bootstrapper
            </summary>
        </member>
        <member name="T:Cocktail.CocktailMefBootstrapper`1">
            <summary>
              Abstract base class to configure the framework to use MEF as the application's IoC container and launch the root ViewModel.
            </summary>
            <typeparam name="TRootModel"> The ViewModel of the main screen. </typeparam>
        </member>
        <member name="M:Cocktail.CocktailMefBootstrapper`1.#ctor(System.Boolean)">
            <summary>
              Creates an instance of the framework bootstrapper.
            </summary>
            <param name="useApplication"> Optionally specify if the bootstrapper should hook into the application object. </param>
        </member>
        <member name="M:Cocktail.CocktailMefBootstrapper`1.OnStartup(System.Object,System.Windows.StartupEventArgs)">
            <summary>
              Performs the framework startup sequence.
            </summary>
        </member>
        <member name="T:Cocktail.Composition">
            <summary>
              Sets up a composition container and provides means to interact with the container.
            </summary>
        </member>
        <member name="M:Cocktail.Composition.AddXapAsync(System.String)">
            <summary>Asynchronously downloads a XAP file.</summary>
            <param name="relativeUri">The relative URI for the XAP file to be downloaded.</param>
            <returns>The asynchronous download <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Cocktail.Composition.SetProvider(Cocktail.ICompositionProvider)">
            <summary>
              Sets the current <see cref="T:Cocktail.ICompositionProvider"/>.
            </summary>
        </member>
        <member name="M:Cocktail.Composition.GetInstance``1">
            <summary>
              Returns an instance of the specified type.
            </summary>
            <typeparam name="T"> Type of the requested instance. </typeparam>
        </member>
        <member name="M:Cocktail.Composition.TryGetInstance``1">
            <summary>
              Returns an instance of the specified type.
            </summary>
            <typeparam name="T"> Type of the requested instance. </typeparam>
            <returns> Null if instance is not present in the container. </returns>
        </member>
        <member name="M:Cocktail.Composition.GetInstances``1">
            <summary>
              Returns all instances of the specified type.
            </summary>
            <typeparam name="T"> Type of the requested instances. </typeparam>
        </member>
        <member name="M:Cocktail.Composition.GetInstance(System.Type,System.String)">
            <summary>
              Returns an instance that matches the specified name and type.
            </summary>
            <param name="serviceType">The type to match.</param>
            <param name="contractName">The name to match.</param>
        </member>
        <member name="M:Cocktail.Composition.TryGetInstance(System.Type,System.String)">
            <summary>
              Returns an instance that matches the specified name and type.
            </summary>
            <param name="serviceType">The type to match.</param>
            <param name="contractName">The name to match.</param>
            <returns> Null if instance is not present in the container. </returns>
        </member>
        <member name="M:Cocktail.Composition.GetInstances(System.Type,System.String)">
            <summary>
              Returns all instances that match the specified name and type.
            </summary>
            <param name="serviceType">The type to match.</param>
            <param name="contractName">The name to match.</param>
        </member>
        <member name="M:Cocktail.Composition.GetLazyInstance``1">
            <summary>
              Returns a lazy instance of the specified type.
            </summary>
            <typeparam name="T"> Type of the requested instance. </typeparam>
        </member>
        <member name="M:Cocktail.Composition.GetLazyInstance(System.Type,System.String)">
            <summary>
              Returns a lazy instance that matches the specified name and type.
            </summary>
            <param name="serviceType">The type to match.</param>
            <param name="contractName">The name to match.</param>
        </member>
        <member name="M:Cocktail.Composition.GetInstanceFactory``1">
            <summary>
              Returns a factory that creates new instances of the specified type.
            </summary>
            <typeparam name="T"> Type of instance the factory creates. </typeparam>
        </member>
        <member name="M:Cocktail.Composition.TryGetInstanceFactory``1">
            <summary>
              Returns a factory that creates new instances of the specified type.
            </summary>
            <typeparam name="T"> Type of instance the factory creates. </typeparam>
            <returns> Null if the container cannot provide a factory for the specified type. </returns>
        </member>
        <member name="M:Cocktail.Composition.BuildUp(System.Object)">
            <summary>
              Manually performs property dependency injection on the provided instance.
            </summary>
            <param name="instance"> The instance needing property injection. </param>
        </member>
        <member name="E:Cocktail.Composition.ProviderChanged">
            <summary>
              Event triggered after a new CompositionProvider was assigned through <see cref="M:Cocktail.Composition.SetProvider(Cocktail.ICompositionProvider)"/>.
            </summary>
        </member>
        <member name="T:Cocktail.ConnectionOptions">
            <summary>
            Holds EntityServer connection parameters independent of an EntityManagerProvider.
            </summary>
            <example>This example shows how to configure and export and EntityManagerProvider using the fake store.
            <code>
                public class EntityManagerProviderFactory
                {
                    [Export]
                    public IEntityManagerProvider&lt;TempHireEntities&gt; TempHireEntityManagerProvider
                    {
                        get
                        {
                            return new EntityManagerProvider&lt;TempHireEntities&gt;().With(ConnectionOptions.Fake.Name);
                        }
                    }
                }
            </code>
            </example>
        </member>
        <member name="F:Cocktail.ConnectionOptions.Default">
            <summary>
            The default connection options. Used when nothing else is specified.
            </summary>
        </member>
        <member name="F:Cocktail.ConnectionOptions.Fake">
            <summary>
            The connection options used to connect to the fake backing store.
            </summary>
        </member>
        <member name="F:Cocktail.ConnectionOptions.DesignTime">
            <summary>
            The connection options used at design time.
            </summary>
        </member>
        <member name="M:Cocktail.ConnectionOptions.#ctor(System.String,System.Boolean,System.String,IdeaBlade.EntityModel.EntityServiceOption,System.String,System.String,System.Boolean)">
            <summary>
            Creates a ConnectionOptions instance with the given name and options.
            </summary>
            <param name="name">The name of the ConnectionOptions.</param>
            <param name="shouldConnect">Specifies whether the EntityManager will attempt to connect to the EntityServer as soon as it is created.</param>
            <param name="dataSourceExtension">Specifies what run-time data source key(s) will be used.</param>
            <param name="entityServiceOption">Specifies whether you will be using local or distributed data sources.</param>
            <param name="compositionContextName">The name of the <see cref="P:Cocktail.ConnectionOptions.CompositionContext"/> used to resolve dependencies and extensions.</param>
            <param name="serviceKey">Names the key providing the address of the application server with which the EntityManager will communicate.</param>
            <param name="isDesignTime">Specifies whether this ConnectionOptions instance is for design time.</param>
        </member>
        <member name="M:Cocktail.ConnectionOptions.ToLoginOptions">
            <summary>
            Converts the ConnectionOptions to a <see cref="T:IdeaBlade.EntityModel.Security.LoginOptions"/> instance.
            </summary>
        </member>
        <member name="M:Cocktail.ConnectionOptions.ToEntityManagerContext(IdeaBlade.EntityModel.EntityManagerOptions)">
            <summary>
            Converts the ConnectionOptions to a <see cref="T:IdeaBlade.EntityModel.EntityManagerContext"/> instance.
            </summary>
            <param name="entityManagerOptions">Additional options controlling the behavior of the EntityManager.</param>
        </member>
        <member name="M:Cocktail.ConnectionOptions.WithName(System.String)">
            <summary>
            Creates a new ConnectionOptions from the current ConnectionOptions and assigns the specified name.
            </summary>
            <param name="name">The name to be assigned.</param>
            <returns>A new ConnectionOptions instance.</returns>
            <remarks>WithName must be used last. All the With... operations clear the name property.</remarks>
        </member>
        <member name="M:Cocktail.ConnectionOptions.WithCompositionContext(System.String)">
            <summary>
            Creates a new ConnectionOptions from the current ConnectionOptions and assigns the specified <see cref="P:Cocktail.ConnectionOptions.CompositionContext"/> name.
            </summary>
            <param name="compositionContextName">The CompositionContext name to be assigned.</param>
            <returns>A new ConnectionOptions instance.</returns>
        </member>
        <member name="M:Cocktail.ConnectionOptions.WithDataSourceExtension(System.String)">
            <summary>
            Creates a new ConnectionOptions from the current ConnectionOptions and assigns the specified data source extension.
            </summary>
            <param name="dataSourceExtension">The data source extension name to be assigned.</param>
            <returns>A new ConnectionOptions instance.</returns>
        </member>
        <member name="M:Cocktail.ConnectionOptions.WithEntityServiceOption(IdeaBlade.EntityModel.EntityServiceOption)">
            <summary>
            Creates a new ConnectionOptions from the current ConnectionOptions and assigns the specified EntityServiceOption.
            </summary>
            <param name="entityServiceOption">The EntityServiceOption to be assigned.</param>
            <returns>A new ConnectionOptions instance.</returns>
        </member>
        <member name="M:Cocktail.ConnectionOptions.WithServiceKey(System.String)">
            <summary>
            Creates a new ConnectionOptions from the current ConnectionOptions and assigns the specified service key.
            </summary>
            <param name="serviceKey">The service key to be assigned.</param>
            <returns>A new ConnectionOptions instance.</returns>
        </member>
        <member name="M:Cocktail.ConnectionOptions.WithShouldConnect(System.Boolean)">
            <summary>
            Creates a new ConnectionOptions from the current ConnectionOptions and specifies whether an EntityManager should connect.
            </summary>
            <param name="shouldConnect">True if an EntityManager should connect prior to the first server operation.</param>
            <returns>A new ConnectionOptions instance.</returns>
        </member>
        <member name="M:Cocktail.ConnectionOptions.GetByName(System.String)">
            <summary>
            Retrieves the ConnectionOptions with the specified name.
            </summary>
            <param name="name">The name of the ConnectionOptions to be retrieved.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the ConnectionOptions with the specified name are not found.</exception>
        </member>
        <member name="P:Cocktail.ConnectionOptions.Name">
            <summary>
            The name of this ConnectionOptions instance.
            </summary>
        </member>
        <member name="P:Cocktail.ConnectionOptions.ShouldConnect">
            <summary>
            Specifies whether the EntityManager will attempt to connect to the EntityServer as soon as it is created.
            </summary>
        </member>
        <member name="P:Cocktail.ConnectionOptions.DataSourceExtension">
            <summary>
            Specifies what run-time data source key(s) will be used.
            </summary>
        </member>
        <member name="P:Cocktail.ConnectionOptions.EntityServiceOption">
            <summary>
            Specifies whether you will be using local or distributed data sources.
            </summary>
        </member>
        <member name="P:Cocktail.ConnectionOptions.ServiceKey">
            <summary>
            Names the key providing the address of the application server with which the EntityManager will communicate.
            </summary>
        </member>
        <member name="P:Cocktail.ConnectionOptions.IsFake">
            <summary>
            Returns whether fake filtering is performed.
            </summary>
        </member>
        <member name="P:Cocktail.ConnectionOptions.IsDesignTime">
            <summary>
            Specifies whether this ConnectionOptions are used for design time.
            </summary>
        </member>
        <member name="P:Cocktail.ConnectionOptions.CompositionContext">
            <summary>
            Returns the <see cref="T:IdeaBlade.Core.Composition.CompositionContext"/> used for this connection.
            </summary>
        </member>
        <member name="T:Cocktail.IConnectionOptionsResolver">
            <summary>
            Interface to be implemented when custom <see cref="T:Cocktail.ConnectionOptions"/> are used.
            </summary>
        </member>
        <member name="M:Cocktail.IConnectionOptionsResolver.GetConnectionOptions(System.String)">
            <summary>
            Called by Cocktail to retrieve the ConnectionOptions having the specified name.
            </summary>
            <param name="name">The name of the ConnectonOptions to be retrieved.</param>
            <returns></returns>
        </member>
        <member name="T:Cocktail.DesignTime">
            <summary>
              A set of static methods and properties to inquire about and configure design time mode.
            </summary>
        </member>
        <member name="F:Cocktail.DesignTime.InDesignMode">
            <summary>
            Function to determine if in DesignMode. Can be replaced for testing.
            </summary>
        </member>
        <member name="M:Cocktail.DesignTime.ResetInDesignModeToDefault">
            <summary>
            Restore <see cref="F:Cocktail.DesignTime.InDesignMode"/> to default method. For testing.
            </summary>
        </member>
        <member name="M:Cocktail.DesignTime.EnableDesignTimeSupport``1">
            <summary>
              Enables full design time support for the specified EntityManager type.
            </summary>
            <typeparam name="T"> The type of EntityManager needing design time support. </typeparam>
            <remarks>
              This method must be called as early as possible, usually in the bootstrapper's static constructor.
            </remarks>
        </member>
        <member name="T:Cocktail.DesignTimeViewModelLocatorBase`1">
            <summary>
            Base class for a design time ViewModelLocator. 
            </summary>
            <remarks>
            To implement a concrete ViewModelLocator for your project,
            extend from this class and override the CreateEntityManager()
            method. Return an instance of type subclass of
            DesignTimeEntityManagerProviderBase.
            
            Add references to all the view models in the
            module or application and by adding the following lines of code
            for each ViewModel. Implement a Start() method to initialize
            the ViewModel.
            
            <code>
            public CustomerListViewModel CustomerListViewModel
            {
                get
                {
                    return new CustomerListViewModel().Start();
                }
            }
            </code>
            <para>
            In Silverlight and WPF, place the ViewModelLocator in the App.xaml resources:
            </para>
            <code>
            &lt;Application.Resources&gt;
                &lt;designTime:ViewModelLocator xmlns:designTime="clr-namespace:your-namespace"
                                             x:Key="ViewModeLocator" /&gt;
            &lt;/Application.Resources&gt;
            </code>
            <para>
            Then use:
            </para>
            <code>
            d:DataContext="{Binding Source={StaticResource ViewModelLocator}, Path=ViewModelName}"
            </code>
            </remarks>
            <typeparam name="T">The type of the EntityManager</typeparam>
        </member>
        <member name="M:Cocktail.DesignTimeViewModelLocatorBase`1.CreateEntityManagerProvider">
            <summary>
            Creates an instance of the concrete DesignTimeEntityManagerProvider
            </summary>
        </member>
        <member name="P:Cocktail.DesignTimeViewModelLocatorBase`1.EntityManagerProvider">
            <summary>Returns the EntityManagerProvider used by the ViewModelLocator.</summary>
        </member>
        <member name="T:Cocktail.Dialog`1">
            <summary>
            Internal use.
            </summary>
        </member>
        <member name="P:Cocktail.Dialog`1.DialogResult">
            <summary>
            Returns the user's response to a dialog or message box.
            </summary>
        </member>
        <member name="P:Cocktail.Dialog`1.Cancelled">
            <summary>Indicates whether the dialog or message box has been cancelled.</summary>
            <value>Cancelled is set to true, if the user clicked the designated cancel button in response to the dialog or message box.</value>
        </member>
        <member name="T:Cocktail.DialogButton">
            <summary>Represents an individual button displayed by the DialogHost.</summary>
        </member>
        <member name="M:Cocktail.DialogButton.#ctor(Cocktail.IUICommand,Cocktail.IDialogHost)">
            <summary>Initializes a new instance of DialogButton.</summary>
            <param name="command">The associated UI command.</param>
            <param name="dialogHost">The assoicated dialog host.</param>
        </member>
        <member name="M:Cocktail.DialogButton.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Cocktail.DialogButton.Command">
            <summary>
            Returns the command associated with this button.
            </summary>
        </member>
        <member name="P:Cocktail.DialogButton.Content">
            <summary>The button content displayed in the view.</summary>
        </member>
        <member name="P:Cocktail.DialogButton.Enabled">
            <summary>Indicates whether the button is currently enabled or disabled.</summary>
        </member>
        <member name="T:Cocktail.DialogHostFns">
            <summary>A collection of extension methods to interact with the dialog host.</summary>
        </member>
        <member name="M:Cocktail.DialogHostFns.DialogHost(Caliburn.Micro.IChild)">
            <summary>Returns a reference to the dialog host if the provided ViewModel is currently hosted in the dialog host.</summary>
            <param name="source">The hosted ViewModel.</param>
            <returns>Null if the ViewModel is not currently hosted in a dialog host, otherwise a reference to the current dialog host.</returns>
        </member>
        <member name="T:Cocktail.DialogHostBase">
            <summary>
              The base view model implementing the dialog host.
            </summary>
            <remarks>
              To customize the dialog host, subclass DialogHostBase and implement a custom view to match the subclassed view model.
            </remarks>
        </member>
        <member name="T:Cocktail.IDialogHost">
            <summary>Public interface to interact with the dialog host.</summary>
        </member>
        <member name="M:Cocktail.IDialogHost.GetButton(System.Object)">
            <summary>Returns the logical button for the provided button value.</summary>
            <param name="value">The user response value associated with this button.</param>
            <returns>A logical object representing the dialog or message box button.</returns>
        </member>
        <member name="M:Cocktail.IDialogHost.TryClose(System.Object)">
            <summary>
            Instructs the dialog host to try closing the dialog window with the provided user response.
            </summary>
            <param name="dialogResult">The simulated user response.</param>
        </member>
        <member name="P:Cocktail.IDialogHost.InvokedCommand">
            <summary>
            Returns the command invoked by the user.
            </summary>
        </member>
        <member name="P:Cocktail.IDialogHost.DialogResult">
            <summary>Returns the user's response to a dialog or message box.</summary>
        </member>
        <member name="M:Cocktail.DialogHostBase.#ctor">
            <summary>
            Initializes a new DialogHostBase instance.
            </summary>
        </member>
        <member name="M:Cocktail.DialogHostBase.Start(System.String,System.Object,System.Collections.Generic.IEnumerable{Cocktail.IUICommand})">
            <summary>
              Initializes and starts the dialog host.
            </summary>
        </member>
        <member name="M:Cocktail.DialogHostBase.Close(Cocktail.DialogButton)">
            <summary>
              Action invoked when the user clicks on any dialog or message box button.
            </summary>
            <param name="dialogButton"> The button that was clicked. </param>
        </member>
        <member name="M:Cocktail.DialogHostBase.OnDeactivate(System.Boolean)">
            <summary>
              Internal use.
            </summary>
        </member>
        <member name="M:Cocktail.DialogHostBase.OnComplete">
            <summary>
              Raises the <see cref="E:Cocktail.DialogHostBase.Completed"/> event.
            </summary>
        </member>
        <member name="M:Cocktail.DialogHostBase.OnViewLoaded(System.Object)">
            <summary>
              Called when DialogHostView's Loaded event fires.
            </summary>
            <param name="view" />
        </member>
        <member name="M:Cocktail.DialogHostBase.CanClose(System.Action{System.Boolean})">
            <summary>
              Called to check whether the dialog host can be closed.
            </summary>
        </member>
        <member name="P:Cocktail.DialogHostBase.DialogButtons">
            <summary>
              Contains the list of buttons to be displayed.
            </summary>
        </member>
        <member name="P:Cocktail.DialogHostBase.ActionsEnabled">
            <summary>
            Indicates whether the dialog actions (buttons) should be enabled or disabled.
            </summary>
        </member>
        <member name="P:Cocktail.DialogHostBase.InvokedCommand">
            <summary>
            Returns the command invoked by the user.
            </summary>
        </member>
        <member name="P:Cocktail.DialogHostBase.DialogResult">
            <summary>
              Returns the user's response to the dialog or message box.
            </summary>
        </member>
        <member name="E:Cocktail.DialogHostBase.Completed">
            <summary>
              Signals that the user has responded to the dialog or message box.
            </summary>
        </member>
        <member name="T:Cocktail.DialogManager">
            <summary>A service that manages modal dialogs and message boxes.</summary>
        </member>
        <member name="T:Cocktail.IDialogManager">
            <summary>A service that manages modal dialogs and message boxes.</summary>
        </member>
        <member name="M:Cocktail.IDialogManager.ShowDialogAsync``1(System.Collections.Generic.IEnumerable{Cocktail.IDialogUICommand{``0}},System.Object,System.String)">
            <summary>Displays a modal dialog with a custom view model.</summary>
            <param name="content">The custom view model to host in the dialog.</param>
            <param name="commands">
                A list of commands that can be invoked as part of the dialog.
            </param>
            <param name="title">Optional title of the dialog.</param>
            <typeparam name="T">
                User-defined dialog result type.
            </typeparam>
            <returns>The dialog result.</returns>
        </member>
        <member name="M:Cocktail.IDialogManager.ShowDialogAsync``1(System.Object,System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>Displays a modal dialog with a custom view model.</summary>
            <param name="content">The custom view model to host in the dialog.</param>
            <param name="dialogButtons">
            A value that indicates the button or buttons to display. See <see cref="T:Cocktail.DialogButtons"/> for predefined button sets.
            </param>
            <param name="title">Optional title of the dialog.</param>
            <typeparam name="T">
            User-defined dialog result type. In most cases <see cref="M:System.Object.ToString"/> is used as the button content.
            </typeparam>
            <returns>The dialog result.</returns>
        </member>
        <member name="M:Cocktail.IDialogManager.ShowDialogAsync``1(System.Object,``0,``0,System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>Displays a modal dialog with a custom view model.</summary>
            <param name="content">The custom view model to host in the dialog.</param>
            <param name="dialogButtons">
            A value that indicates the button or buttons to display. See <see cref="T:Cocktail.DialogButtons"/> for predefined button sets.
            </param>
            <param name="defaultButton"> 
            Specifies the default button. The Enter key will be mapped to this button.
            </param>
            <param name="cancelButton">
            Specifies the designated cancel button. If the user clicks this button, the Task will be marked as cancelled.
            </param>
            <param name="title">Optional title of the dialog.</param>
            <typeparam name="T">
            User-defined dialog result type. In most cases <see cref="M:System.Object.ToString"/> is used as the button content.
            </typeparam>
            <returns>The dialog result.</returns>
        </member>
        <member name="M:Cocktail.IDialogManager.ShowDialogAsync(System.Object,System.Collections.Generic.IEnumerable{Cocktail.DialogResult},System.String)">
            <summary>Displays a modal dialog with a custom view model.</summary>
            <param name="content">The custom view model to host in the dialog.</param>
            <param name="dialogButtons">
            A value that indicates the button or buttons to display. See <see cref="T:Cocktail.DialogButtons"/> for predefined button sets.
            </param>
            <param name="title">Optional title of the dialog.</param>
            <returns>The dialog result.</returns>
        </member>
        <member name="M:Cocktail.IDialogManager.ShowMessageAsync``1(System.Collections.Generic.IEnumerable{Cocktail.IDialogUICommand{``0}},System.String,System.String)">
            <summary>Displays a modal message box.</summary>
            <param name="message">The message to display.</param>
            <param name="commands">
                A list of commands that can be invoked as part of the message box.
            </param>
            <param name="title">Optional title of the message box.</param>
            <typeparam name="T">
                User-defined dialog result type.
            </typeparam>
            <returns>The dialog result.</returns>
        </member>
        <member name="M:Cocktail.IDialogManager.ShowMessageAsync``1(System.String,System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>Displays a modal message box.</summary>
            <param name="message">The message to display.</param>
            <param name="dialogButtons">
            A value that indicates the button or buttons to display. See <see cref="T:Cocktail.DialogButtons"/> for predefined button sets.
            </param>
            <param name="title">Optional title of the message box.</param>
            <typeparam name="T">
            User-defined dialog result type. In most cases <see cref="M:System.Object.ToString"/> is used as the button content.
            </typeparam>
            <returns>The dialog result.</returns>
        </member>
        <member name="M:Cocktail.IDialogManager.ShowMessageAsync``1(System.String,``0,``0,System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>Displays a modal message box.</summary>
            <param name="message">The message to display.</param>
            <param name="dialogButtons">
            A value that indicates the button or buttons to display. See <see cref="T:Cocktail.DialogButtons"/> for predefined button sets.
            </param>
            <param name="defaultButton"> 
            Specifies the default button. The Enter key will be mapped to this button.
            </param>
            <param name="cancelButton">
            Specifies the designated cancel button. If the user clicks this button, the Task will be marked as cancelled.
            </param>
            <param name="title">Optional title of the message box.</param>
            <typeparam name="T">
            User-defined dialog result type. In most cases <see cref="M:System.Object.ToString"/> is used as the button content.
            </typeparam>
            <returns>The dialog result.</returns>
        </member>
        <member name="M:Cocktail.IDialogManager.ShowMessageAsync(System.String,System.Collections.Generic.IEnumerable{Cocktail.DialogResult},System.String)">
            <summary>Displays a modal message box.</summary>
            <param name="message">The message to display.</param>
            <param name="dialogButtons">
            A value that indicates the button or buttons to display. See <see cref="T:Cocktail.DialogButtons"/> for predefined button sets.
            </param>
            <param name="title">Optional title of the message box.</param>
            <returns>The dialog result.</returns>
        </member>
        <member name="M:Cocktail.DialogManager.ShowDialogAsync``1(System.Collections.Generic.IEnumerable{Cocktail.IDialogUICommand{``0}},System.Object,System.String)">
            <summary>Displays a modal dialog with a custom view model.</summary>
            <param name="content">The custom view model to host in the dialog.</param>
            <param name="commands">
                A list of commands that can be invoked as part of the dialog.
            </param>
            <param name="title">Optional title of the dialog.</param>
            <typeparam name="T">
                User-defined dialog result type.
            </typeparam>
            <returns>The dialog result.</returns>
        </member>
        <member name="M:Cocktail.DialogManager.ShowDialogAsync``1(System.Object,System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>Displays a modal dialog with a custom view model.</summary>
            <param name="content">The custom view model to host in the dialog.</param>
            <param name="dialogButtons">
            A value that indicates the button or buttons to display. See <see cref="T:Cocktail.DialogButtons"/> for predefined button sets.
            </param>
            <param name="title">Optional title of the dialog.</param>
            <typeparam name="T">
            User-defined dialog result type. In most cases <see cref="M:System.Object.ToString"/> is used as the button content.
            </typeparam>
            <returns>The dialog result.</returns>
        </member>
        <member name="M:Cocktail.DialogManager.ShowDialogAsync``1(System.Object,``0,``0,System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>Displays a modal dialog with a custom view model.</summary>
            <param name="content">The custom view model to host in the dialog.</param>
            <param name="dialogButtons">
            A value that indicates the button or buttons to display. See <see cref="T:Cocktail.DialogButtons"/> for predefined button sets.
            </param>
            <param name="defaultButton"> 
            Specifies the default button. The Enter key will be mapped to this button.
            </param>
            <param name="cancelButton">
            Specifies the button taking on the special role of the cancel function. If the user clicks this button, 
            the Task will be marked as cancelled.
            </param>
            <param name="title">Optional title of the dialog.</param>
            <typeparam name="T">
            User-defined dialog result type. In most cases <see cref="M:System.Object.ToString"/> is used as the button content.
            </typeparam>
            <returns>The dialog result.</returns>
        </member>
        <member name="M:Cocktail.DialogManager.ShowDialogAsync(System.Object,System.Collections.Generic.IEnumerable{Cocktail.DialogResult},System.String)">
            <summary>Displays a modal dialog with a custom view model.</summary>
            <param name="content">The custom view model to host in the dialog.</param>
            <param name="dialogButtons">
            A value that indicates the button or buttons to display. See <see cref="T:Cocktail.DialogButtons"/> for predefined button sets.
            </param>
            <param name="title">Optional title of the dialog.</param>
            <returns>The dialog result.</returns>
        </member>
        <member name="M:Cocktail.DialogManager.ShowMessageAsync``1(System.Collections.Generic.IEnumerable{Cocktail.IDialogUICommand{``0}},System.String,System.String)">
            <summary>Displays a modal message box.</summary>
            <param name="message">The message to display.</param>
            <param name="commands">
                A list of commands that can be invoked as part of the message box.
            </param>
            <param name="title">Optional title of the message box.</param>
            <typeparam name="T">
                User-defined dialog result type.
            </typeparam>
            <returns>The dialog result.</returns>
        </member>
        <member name="M:Cocktail.DialogManager.ShowMessageAsync``1(System.String,System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>Displays a modal message box.</summary>
            <param name="message">The message to display.</param>
            <param name="dialogButtons">
            A value that indicates the button or buttons to display. See <see cref="T:Cocktail.DialogButtons"/> for predefined button sets.
            </param>
            <param name="title">Optional title of the message box.</param>
            <typeparam name="T">
            User-defined dialog result type. In most cases <see cref="M:System.Object.ToString"/> is used as the button content.
            </typeparam>
            <returns>The dialog result.</returns>
        </member>
        <member name="M:Cocktail.DialogManager.ShowMessageAsync``1(System.String,``0,``0,System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>Displays a modal message box.</summary>
            <param name="message">The message to display.</param>
            <param name="dialogButtons">
            A value that indicates the button or buttons to display. See <see cref="T:Cocktail.DialogButtons"/> for predefined button sets.
            </param>
            <param name="defaultButton"> 
            Specifies the default button. The Enter key will be mapped to this button.
            </param>
            <param name="cancelButton">
            Specifies the button taking on the special role of the cancel function. If the user clicks this button, 
            the Task will be marked as cancelled.
            </param>
            <param name="title">Optional title of the message box.</param>
            <typeparam name="T">
            User-defined dialog result type. In most cases <see cref="M:System.Object.ToString"/> is used as the button content.
            </typeparam>
            <returns>The dialog result.</returns>
        </member>
        <member name="M:Cocktail.DialogManager.ShowMessageAsync(System.String,System.Collections.Generic.IEnumerable{Cocktail.DialogResult},System.String)">
            <summary>Displays a modal message box.</summary>
            <param name="message">The message to display.</param>
            <param name="dialogButtons">
            A value that indicates the button or buttons to display. See <see cref="T:Cocktail.DialogButtons"/> for predefined button sets.
            </param>
            <param name="title">Optional title of the message box.</param>
            <returns>The dialog result.</returns>
        </member>
        <member name="T:Cocktail.DialogUICommand`1">
            <summary>
                Represents a command in a message or dialog box.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Cocktail.UICommand">
            <summary>
                Represents a command in the UI.
            </summary>
        </member>
        <member name="T:Cocktail.IUICommand">
            <summary>
            Represents a command in the UI.
            </summary>
        </member>
        <member name="P:Cocktail.IUICommand.Label">
            <summary>
            Gets the optional label of the UI command.
            </summary>
        </member>
        <member name="P:Cocktail.IUICommand.IsDefaultCommand">
            <summary>
            Specifies whether this command is the default command.
            </summary>
        </member>
        <member name="P:Cocktail.IUICommand.IsCancelCommand">
            <summary>
            Specifies whether this command is used to cancel an operation.
            </summary>
        </member>
        <member name="P:Cocktail.IUICommand.Enabled">
            <summary>
            Enables or disables the UI command.
            </summary>
        </member>
        <member name="P:Cocktail.IUICommand.WasCancelled">
            <summary>
            Returns true if the command invocation was cancelled.
            </summary>
        </member>
        <member name="E:Cocktail.IUICommand.Invoked">
            <summary>
            Event triggerd when the UI command is being invoked.
            </summary>
        </member>
        <member name="M:Cocktail.UICommand.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
                Creates a new instance of the UICommand class.
            </summary>
            <param name="label">The label of the command.</param>
            <param name="isDefaultCommand">True if command is the default command.</param>
            <param name="isCancelCommand">True if the command is used to cancel.</param>
        </member>
        <member name="M:Cocktail.UICommand.#ctor(System.Boolean,System.Boolean)">
            <summary>
                Creates a new instance of the UICommand class.
            </summary>
            <param name="isDefaultCommand">True if command is the default command.</param>
            <param name="isCancelCommand">True if the command is used to cancel.</param>
        </member>
        <member name="M:Cocktail.UICommand.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Cocktail.UICommand.OnPropertyChanged(System.String)">
            <summary>
                Triggers the <see cref="E:Cocktail.UICommand.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">The name of the property that has changed.</param>
        </member>
        <member name="M:Cocktail.UICommand.OnInvoked(Cocktail.UICommandInvokedArgs)">
            <summary>
                Triggers the <see cref="E:Cocktail.UICommand.Invoked"/> event.
            </summary>
            <returns>True if the command was successful, false if the command was cancelled.</returns>
        </member>
        <member name="E:Cocktail.UICommand.PropertyChanged">
            <summary>
                Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Cocktail.UICommand.Label">
            <summary>
                Gets or sets the optional label of the UI command.
            </summary>
        </member>
        <member name="P:Cocktail.UICommand.IsDefaultCommand">
            <summary>
                Specifies whether this command is the default command.
            </summary>
        </member>
        <member name="P:Cocktail.UICommand.IsCancelCommand">
            <summary>
                Specifies whether this command is used to cancel an operation.
            </summary>
        </member>
        <member name="P:Cocktail.UICommand.Enabled">
            <summary>
                Enables or disables the UI command.
            </summary>
        </member>
        <member name="P:Cocktail.UICommand.WasCancelled">
            <summary>
            Returns true if the command invocation was cancelled.
            </summary>
        </member>
        <member name="E:Cocktail.UICommand.Invoked">
            <summary>
                Event triggerd when the UI command is being invoked.
            </summary>
        </member>
        <member name="T:Cocktail.IDialogUICommand`1">
            <summary>
            Represents a command in a message or dialog box.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Cocktail.IDialogUICommand`1.DialogResult">
            <summary>
            The dialog result associated with this command.
            </summary>
        </member>
        <member name="E:Cocktail.IDialogUICommand`1.Invoked">
            <summary>
            Event triggerd when the UI command is being invoked.
            </summary>
        </member>
        <member name="M:Cocktail.DialogUICommand`1.#ctor(System.String,`0,System.Boolean,System.Boolean)">
            <summary>
                Creates a new instance of the DialogUICommand&lt;T&gt; class.
            </summary>
            <param name="label">The label of the command.</param>
            <param name="dialogResult">The associated dialog result value.</param>
            <param name="isDefaultCommand">True if command is the default command.</param>
            <param name="isCancelCommand">True if the command is used to cancel.</param>
        </member>
        <member name="M:Cocktail.DialogUICommand`1.#ctor(`0,System.Boolean,System.Boolean)">
            <summary>
                Creates a new instance of the DialogUICommand&lt;T&gt; class.
            </summary>
            <param name="dialogResult">The associated dialog result value.</param>
            <param name="isDefaultCommand">True if command is the default command.</param>
            <param name="isCancelCommand">True if the command is used to cancel.</param>
        </member>
        <member name="M:Cocktail.DialogUICommand`1.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Cocktail.DialogUICommand`1.OnInvoked(Cocktail.DialogUICommandInvokedArgs)">
            <summary>
                Triggers the <see cref="E:Cocktail.DialogUICommand`1.Invoked"/> event.
            </summary>
            <returns>True if the command was successful, false if the command was cancelled.</returns>
        </member>
        <member name="P:Cocktail.DialogUICommand`1.DialogResult">
            <summary>
                The dialog result associated with this command.
            </summary>
        </member>
        <member name="E:Cocktail.DialogUICommand`1.Invoked">
            <summary>
                Event triggerd when the UI command is being invoked.
            </summary>
        </member>
        <member name="T:Cocktail.DialogUICommandInvokedArgs">
            <summary>
                Provides information to the <see cref="E:Cocktail.DialogUICommand`1.Invoked"/> event.
            </summary>
        </member>
        <member name="T:Cocktail.UICommandInvokedArgs">
            <summary>
            Provides information to the <see cref="E:Cocktail.UICommand.Invoked"/> event.
            </summary>
        </member>
        <member name="M:Cocktail.UICommandInvokedArgs.#ctor(Cocktail.IUICommand)">
            <summary>
            Creates a new instance of the UICommandInvokedArgs class.
            </summary>
            <param name="command">The invoked command.</param>
        </member>
        <member name="M:Cocktail.UICommandInvokedArgs.Cancel">
            <summary>
            Cancels the command.
            </summary>
        </member>
        <member name="P:Cocktail.UICommandInvokedArgs.Command">
            <summary>
            Gets the invoked command.
            </summary>
        </member>
        <member name="P:Cocktail.UICommandInvokedArgs.Cancelled">
            <summary>
            True if the command was cancelled.
            </summary>
        </member>
        <member name="M:Cocktail.DialogUICommandInvokedArgs.#ctor(Cocktail.IDialogHost,Cocktail.IUICommand)">
            <summary>
                Creates a new instance of the DialogUICommandInvokedArgs class.
            </summary>
            <param name="dialogHost">The dialog host associated with the command.</param>
            <param name="command">The invoked command.</param>
        </member>
        <member name="P:Cocktail.DialogUICommandInvokedArgs.DialogHost">
            <summary>
                Returns the dialog host associated with the command.
            </summary>
        </member>
        <member name="T:Cocktail.IEntityManagerProviderConfigurator`1">
            <summary>
            Interface used to configure an EntityManagerProvider.
            </summary>
            <typeparam name="T">The type of EntityManager</typeparam>
        </member>
        <member name="M:Cocktail.IEntityManagerProviderConfigurator`1.WithConnectionOptions(System.String)">
            <summary>
            Configures the name of the <see cref="T:Cocktail.ConnectionOptions"/> to be used.
            </summary>
            <param name="connectionOptionsName">The name of the ConnectionOptions.</param>
        </member>
        <member name="M:Cocktail.IEntityManagerProviderConfigurator`1.WithSampleDataProviders(Cocktail.ISampleDataProvider{`0}[])">
            <summary>
            Configures the list of SampleDataProviders.
            </summary>
            <param name="sampleDataProviders">One or more sample data providers.</param>
            <remarks>If the SampleDataProviders are not configured, the EntityManagerProvider will try to discover them through the MEF container.</remarks>
        </member>
        <member name="M:Cocktail.IEntityManagerProviderConfigurator`1.WithSyncInterceptor(Cocktail.IEntityManagerSyncInterceptor)">
            <summary>
            Configures the SyncInterceptor.
            </summary>
            <param name="syncInterceptor">The SyncInterceptor to be used.</param>
            <remarks>If no SyncInterceptor is configured, the EntityManagerProvider will try to discover it through the MEF container.</remarks>
        </member>
        <member name="M:Cocktail.IEntityManagerProviderConfigurator`1.WithDelegates(Cocktail.EntityManagerDelegate{`0}[])">
            <summary>
            Configures the EntityManagerDelegates.
            </summary>
            <param name="delegates">One or more EntityManagerDelegate.</param>
            <remarks>If the EntityManagerDelegates are not configured, the EntityManagerProvider will try to discover them through the MEF container.</remarks>
        </member>
        <member name="M:Cocktail.IEntityManagerProviderConfigurator`1.WithErrorNotifiers(Cocktail.IValidationErrorNotification[])">
            <summary>
            Configures the validation error notifiers.
            </summary>
            <param name="errorNotifiers">One or more validation error notifier.</param>
            <remarks>If the validation error notifiers are not configured, the EntityManagerProvider will try to discover them through the MEF container.</remarks>
        </member>
        <member name="T:Cocktail.EntityManagerProvider`1">
            <summary>
              Manages and provides an EntityManager.
            </summary>
            <typeparam name="T"> The type of the EntityManager </typeparam>
        </member>
        <member name="T:Cocktail.IEntityManagerProvider`1">
            <summary>Generic interface identifying an EntityManagerProvider.</summary>
            <typeparam name="T">The type of the EntityManager</typeparam>
        </member>
        <member name="T:Cocktail.IEntityManagerProvider">
            <summary>Interface identifying an EntityManagerProvider.</summary>
        </member>
        <member name="P:Cocktail.IEntityManagerProvider.HasValidationError">
            <summary>
            Returns true if the last save operation aborted due to a validation error.
            </summary>
        </member>
        <member name="P:Cocktail.IEntityManagerProvider.IsSaving">
            <summary>
            Returns true if a save is in progress. A <see cref="T:System.InvalidOperationException"/> is thrown 
            if EntityManager.SaveChangesAsync is called while a previous SaveChangesAsync is still in progress.
            </summary>
        </member>
        <member name="P:Cocktail.IEntityManagerProvider.ConnectionOptions">
            <summary>
            Specifies the ConnectionOptions used by the current EntityManagerProvider.
            </summary>
        </member>
        <member name="P:Cocktail.IEntityManagerProvider.Manager">
            <summary>
            Returns the EntityManager managed by this provider.
            </summary>
        </member>
        <member name="E:Cocktail.IEntityManagerProvider.DataChanged">
            <summary>
            Signals that a Save of at least one entity has been performed
            or changed entities have been imported from another entity manager.
            Clients may use this event to force a data refresh. 
            </summary>
        </member>
        <member name="E:Cocktail.IEntityManagerProvider.EntityChanged">
            <summary>
            Fired whenever an entity's state has changed in any significant manner.
            </summary>
        </member>
        <member name="E:Cocktail.IEntityManagerProvider.ManagerCreated">
            <summary>
            Event fired after the EntityManager got created.
            </summary>
        </member>
        <member name="P:Cocktail.IEntityManagerProvider`1.Manager">
            <summary>Returns the EntityManager managed by this provider.</summary>
        </member>
        <member name="M:Cocktail.EntityManagerProvider`1.#ctor">
            <summary>
              Initializes a new instance.
            </summary>
        </member>
        <member name="M:Cocktail.EntityManagerProvider`1.Configure(System.Action{Cocktail.IEntityManagerProviderConfigurator{`0}})">
            <summary>
            Configures the current EntityManagerProvider.
            </summary>
            <param name="configure">Delegate to perform the configuration.</param>
        </member>
        <member name="M:Cocktail.EntityManagerProvider`1.Caliburn#Micro#IHandle{Cocktail#SyncDataMessage{T}}#Handle(Cocktail.SyncDataMessage{`0})">
            <summary>
              Internal use.
            </summary>
        </member>
        <member name="M:Cocktail.EntityManagerProvider`1.OnManagerCreated">
            <summary>
              Triggers the ManagerCreated event.
            </summary>
        </member>
        <member name="M:Cocktail.EntityManagerProvider`1.OnDataChanged(System.Collections.Generic.IEnumerable{IdeaBlade.EntityModel.EntityKey})">
            <summary>
              Triggers the DataChanged event.
            </summary>
            <param name="entityKeys"> The list of keys for the changed entities </param>
        </member>
        <member name="M:Cocktail.EntityManagerProvider`1.OnEntityChanged(IdeaBlade.EntityModel.EntityAspect,IdeaBlade.EntityModel.EntityAction)">
            <summary>
              Triggers the EntityChanged event.
            </summary>
            <param name="entityAspect">The changed entity's EntityAspect.</param>
            <param name="entityAction">The action that caused this change.</param>
        </member>
        <member name="M:Cocktail.EntityManagerProvider`1.CreateEntityManager">
            <summary>
              Creates a new EntityManager instance.
            </summary>
        </member>
        <member name="P:Cocktail.EntityManagerProvider`1.ConnectionOptions">
            <summary>
              Specifies the ConnectionOptions used by the current EntityManagerProvider.
            </summary>
        </member>
        <member name="P:Cocktail.EntityManagerProvider`1.HasValidationError">
            <summary>
              Returns true if any entities in the EntityManager cache have validation errors.
            </summary>
        </member>
        <member name="P:Cocktail.EntityManagerProvider`1.IsSaving">
            <summary>
              Returns true if a save is in progress. A <see cref="T:System.InvalidOperationException"/> is thrown if EntityManager.SaveChangesAsync is called while a previous SaveChangesAsync is still in progress.
            </summary>
        </member>
        <member name="P:Cocktail.EntityManagerProvider`1.Manager">
            <summary>
              Returns the EntityManager managed by this provider.
            </summary>
        </member>
        <member name="E:Cocktail.EntityManagerProvider`1.DataChanged">
            <summary>
            Signals that a Save of at least one entity has been performed
            or changed entities have been imported from another entity manager.
            Clients may use this event to force a data refresh. 
            </summary>
        </member>
        <member name="E:Cocktail.EntityManagerProvider`1.EntityChanged">
            <summary>
            Fired whenever an entity's state has changed in any significant manner.
            </summary>
        </member>
        <member name="E:Cocktail.EntityManagerProvider`1.ManagerCreated">
            <summary>
            Event fired after the EntityManager got created.
            </summary>
        </member>
        <member name="T:Cocktail.DefaultDebugLogger">
            <summary>Default Caliburn.Micro logger for debug builds.</summary>
            <remarks>A logger for diagnostic output from Caliburn.Micro.
            Typically activated in the static constructor of the AppBootstrapper.
            The diagnostics messages are sent to the <see cref="T:Cocktail.TraceLogger"/>.
            For diagnostics messages to be sent to the TraceLogger, the Cocktail debug assemblies must be used.
            </remarks>
            <example>
            	<code title="" description="static AppBootstrapper(&#xA;            {&#xA;                 DefaultDebugLogger.SetAsLogger();&#xA;            }" lang="C#"></code>
            </example>
        </member>
        <member name="M:Cocktail.DefaultDebugLogger.SetAsLogger">
            <summary>Set the Caliburn Logger with Cocktail <see cref="T:Cocktail.DefaultDebugLogger"/>.</summary>
        </member>
        <member name="M:Cocktail.DefaultDebugLogger.#ctor(System.Type)">
            <summary>Constructor for a type to log.</summary>
            <param name="type">The type of object that is being logged about.</param>
        </member>
        <member name="F:Cocktail.DefaultDebugLogger.LogFormatter">
            <summary>
            Replaceable log message formatter.
            See <see cref="M:Cocktail.DefaultDebugLogger.DefaultLogFormatter(System.Type,System.String,System.String)"/> example.
            </summary>
        </member>
        <member name="M:Cocktail.DefaultDebugLogger.DefaultLogFormatter(System.Type,System.String,System.String)">
            <summary>Default formatter of log messages; see <see cref="M:Cocktail.DefaultDebugLogger.Log(System.String,System.String,System.Object[])"/>.</summary>
        </member>
        <member name="M:Cocktail.DefaultDebugLogger.LogWriter(System.String)">
            <summary>Writes log messages to <see cref="T:System.Diagnostics.Debug"/>.</summary>
        </member>
        <member name="M:Cocktail.DefaultDebugLogger.MatchesSkippableName(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
             Skip logging of message about routine and harmless ViewModel members.
             </summary>
             <remarks>
             Currently only skips if the logging type is 
             <see cref="T:Caliburn.Micro.ViewModelBinder"/>
             and the first arg is in <see cref="P:Cocktail.DefaultDebugLogger.SkippableNames"/>.
             </remarks>
        </member>
        <member name="P:Cocktail.DefaultDebugLogger.SkippableNames">
            <summary>
            Collection of type member names that should not be logged (should be skipped).
            </summary>
        </member>
        <member name="T:Cocktail.DataChangedEventArgs">
            <summary>
            Event arguments for events signaling that entities have changed
            </summary>
        </member>
        <member name="M:Cocktail.DataChangedEventArgs.#ctor(System.Collections.Generic.IEnumerable{IdeaBlade.EntityModel.EntityKey},IdeaBlade.EntityModel.EntityManager)">
            <summary>Constructs a new DataChangedEventArgs</summary>
            <param name="entityKeys">The list of entity keys that were added, modified or deleted</param>
            <param name="manager">The EntityManager that triggered the event. For internal use.</param>
        </member>
        <member name="M:Cocktail.DataChangedEventArgs.EntityExists(IdeaBlade.EntityModel.EntityKey)">
            <summary>Determines if a matching entity for the provided key exists in the cache of the EntityManager that triggered the event.</summary>
            <param name="key">The entity's key.</param>
            <returns>True if the entity exists.</returns>
        </member>
        <member name="M:Cocktail.DataChangedEventArgs.GetEntity(IdeaBlade.EntityModel.EntityKey)">
            <summary>Gets the complete entity from the EntityManager that triggered the event.</summary>
            <param name="key">The entities key.</param>
            <returns>An object representing the entity or null if it doesn't exist.</returns>
        </member>
        <member name="P:Cocktail.DataChangedEventArgs.EntityKeys">
            <summary>Contains the list of entity keys that were added, modified or deleted</summary>
        </member>
        <member name="T:Cocktail.DefaultEntityManagerSyncInterceptor">
            <summary>
            Internal use.
            </summary>
        </member>
        <member name="T:Cocktail.IEntityManagerSyncInterceptor">
            <summary>Internal use.</summary>
        </member>
        <member name="M:Cocktail.IEntityManagerSyncInterceptor.ShouldExportEntity(System.Object)">
            <summary>Internal use.</summary>
        </member>
        <member name="M:Cocktail.IEntityManagerSyncInterceptor.ShouldImportEntity(System.Object)">
            <summary>Internal use.</summary>
        </member>
        <member name="M:Cocktail.DefaultEntityManagerSyncInterceptor.ShouldExportEntity(System.Object)">
            <summary>Internal use.</summary>
        </member>
        <member name="M:Cocktail.DefaultEntityManagerSyncInterceptor.ShouldImportEntity(System.Object)">
            <summary>Internal use.</summary>
        </member>
        <member name="T:Cocktail.EntityManagerDelegate">
            <summary>Internal use.</summary>
        </member>
        <member name="T:Cocktail.EntityManagerDelegate`1">
            <summary>Provides the means to perform tasks in response to events from an EntityManager.</summary>
            <typeparam name="T">The EntityManager type for which the events should be intercepted.</typeparam>
            <remarks>To handle events, create a new class extending EntityManagerDelegate&lt;T&gt; and override the respective methods. Multiple
            EntityManagerDelegates are supported.</remarks>
        </member>
        <member name="M:Cocktail.EntityManagerDelegate`1.#ctor">
            <summary>
            Initializes a new EntityManagerDelegate instance.
            </summary>
        </member>
        <member name="M:Cocktail.EntityManagerDelegate`1.OnCleared(`0,IdeaBlade.EntityModel.EntityManagerClearedEventArgs)">
            <summary>Called whenever the entityManager is cleared.</summary>
            <param name="source">The EntityManager on which a EntityManager.Clear() has been called.</param>
            <param name="args">The original event arguments.</param>
        </member>
        <member name="M:Cocktail.EntityManagerDelegate`1.OnEntityChanged(`0,IdeaBlade.EntityModel.EntityChangedEventArgs)">
            <summary>Called whenever an entity's state has changed in any significant manner.</summary>
            <param name="args">The original event arguments.</param>
            <param name="source">The source of the event.</param>
        </member>
        <member name="M:Cocktail.EntityManagerDelegate`1.OnEntityChanging(`0,IdeaBlade.EntityModel.EntityChangingEventArgs)">
            <summary>Called whenever an entity's state is changing in any significant manner.</summary>
            <param name="args">The original event arguments.</param>
            <param name="source">The source of the event.</param>
        </member>
        <member name="M:Cocktail.EntityManagerDelegate`1.OnEntityServerError(`0,IdeaBlade.EntityModel.EntityServerErrorEventArgs)">
            <summary>Called when an error occurs while accessing the EntityServer or backend data source.</summary>
            <param name="args">The original event arguments.</param>
            <param name="source">The source of the event.</param>
        </member>
        <member name="M:Cocktail.EntityManagerDelegate`1.OnFetching(`0,IdeaBlade.EntityModel.EntityFetchingEventArgs)">
            <summary>Called before the EntityManager fetches data from an EntityServer. Will only be called if the query will not be satisfied out of
            the local cache.</summary>
            <param name="args">The original event arguments.</param>
            <param name="source">The source of the event.</param>
        </member>
        <member name="M:Cocktail.EntityManagerDelegate`1.OnQueried(`0,IdeaBlade.EntityModel.EntityQueriedEventArgs)">
            <summary>Occurs after the EntityManager has completed processing of a query.</summary>
            <param name="args">The original event arguments.</param>
            <param name="source">The source of the event.</param>
        </member>
        <member name="M:Cocktail.EntityManagerDelegate`1.OnQuerying(`0,IdeaBlade.EntityModel.EntityQueryingEventArgs)">
            <summary>Called before the EntityManager executes a query.</summary>
            <param name="args">The original event arguments.</param>
            <param name="source">The source of the event.</param>
        </member>
        <member name="M:Cocktail.EntityManagerDelegate`1.OnSaved(`0,IdeaBlade.EntityModel.EntitySavedEventArgs)">
            <summary>Called after the EntityManager has persisted changed entities.</summary>
            <param name="args">The original event arguments.</param>
            <param name="source">The source of the event.</param>
        </member>
        <member name="M:Cocktail.EntityManagerDelegate`1.OnSaving(`0,IdeaBlade.EntityModel.EntitySavingEventArgs)">
            <summary>Called when the EntityManager is preparing to save changes.</summary>
            <param name="args">The original event arguments.</param>
            <param name="source">The source of the event.</param>
        </member>
        <member name="M:Cocktail.EntityManagerDelegate`1.Validate(System.Object,IdeaBlade.Validation.VerifierResultCollection)">
            <summary>
            Override to perform client-side custom validation on a given entity before saving.
            </summary>
            <param name="entity">The entity to be validated</param>
            <param name="validationErrors">A collection to add the validation results</param>
        </member>
        <member name="T:Cocktail.EntityManagerSyncInterceptor">
            <summary>
            Controls the syncing of Entities between multiple EntityManagers.
            By default no entities are being synced.
            
            To sync entities, create a subclass of EntityManagerSyncInterceptor
            and override the inherited methods to control the import and export
            of entities.
            </summary>
        </member>
        <member name="M:Cocktail.EntityManagerSyncInterceptor.ShouldImportEntity(System.Object)">
            <summary>
            Controls which entities should be imported to the EntityManager
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Cocktail.EntityManagerSyncInterceptor.ShouldExportEntity(System.Object)">
            <summary>
            Controls which entities should be exported from an EntityManager
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="P:Cocktail.EntityManagerSyncInterceptor.EntityManager">
            <summary>Provides access to the importing or exporting EntityManager.</summary>
            <value>The instance of the EntityManager currently in the process of exporting or importing changed entities.</value>
        </member>
        <member name="T:Cocktail.EntityNotFoundException">
            <summary>
              Exception thrown if an entity cannot be found.
            </summary>
        </member>
        <member name="M:Cocktail.EntityNotFoundException.#ctor(System.String)">
            <summary>
              Initializes a new EntityNotFoundException.
            </summary>
            <param name="message"> A message added to describe the exception. </param>
        </member>
        <member name="T:Cocktail.EventFns">
            <summary>A collection of static methods to provide additional EventAggregator functionality</summary>
        </member>
        <member name="M:Cocktail.EventFns.IsHandler(System.Object,System.Type)">
            <summary>Returns true if the provided object implements IHandle for the given messageType.</summary>
            <param name="handler">The object to be probed.</param>
            <param name="messageType">The type of the message to be handled.</param>
            <returns>True if the handler handles the given message type.</returns>
        </member>
        <member name="M:Cocktail.EventFns.Forward(System.Object,System.Object)">
            <summary>Forwards a given message to the specified handler. The handler must
               implement the corresponding IHandle interface for the message to be delivered.</summary>
            <param name="handler">The object to handle the message.</param>
            <param name="message">The message to be forwarded.</param>
        </member>
        <member name="M:Cocktail.EventFns.RaiseOnce``1(System.EventHandler{``0}@,System.Object,``0)">
            <summary>Raises the given event and then clears all event handlers.</summary>
            <param name="event">The event to be raised.</param>
            <param name="sender">The object raising the event. This will be the sender.</param>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:Cocktail.EventFns.Subscribe(System.Object)">
            <summary>
              Subscribes an instance to all events declared through implementations of <see cref="T:Caliburn.Micro.IHandle`1"/>
            </summary>
            <param name="instance">The instance to subscribe for event publication.</param>
            <returns>True if EventAggregator is available and operation was successful</returns>
        </member>
        <member name="M:Cocktail.EventFns.Unsubscribe(System.Object)">
            <summary>
              Unsubscribe the instance from all events.
            </summary>
            <param name = "instance">The instance to unsubscribe.</param>
            <returns>True if EventAggregator is available and operation was successful</returns>
        </member>
        <member name="M:Cocktail.EventFns.Publish(System.Object)">
            <summary>
              Publishes a message.
            </summary>
            <param name = "message">The message instance.</param>
            <remarks>
              Uses the default thread marshaller during publication.
            </remarks>
            <returns>True if EventAggregator is available and operation was successful</returns>
        </member>
        <member name="M:Cocktail.EventFns.Publish(System.Object,System.Action{System.Action})">
            <summary>
              Publishes a message.
            </summary>
            <param name = "message">The message instance.</param>
            <param name = "marshal">Allows the publisher to provide a custom thread marshaller for the message publication.</param>
            <returns>True if EventAggregator is available and operation was successful</returns>
        </member>
        <member name="T:Cocktail.Factory`1">
            <summary>
              A generic entity factory implementation
            </summary>
            <typeparam name="T"> The type of entity this factory creates. </typeparam>
        </member>
        <member name="T:Cocktail.IFactory`1">
            <summary>
            Interface to be implemented by an entity factory.
            </summary>
            <typeparam name="T">The type of entity this factory can create.</typeparam>
        </member>
        <member name="M:Cocktail.IFactory`1.CreateAsync">
            <summary>
            Creates a new entity instance of type T.
            </summary>
            <returns>The newly created entity attached to the underlying EntityManager.</returns>
        </member>
        <member name="M:Cocktail.IFactory`1.CreateAsync(System.Threading.CancellationToken)">
            <summary>
            Creates a new entity instance of type T.
            </summary>
            <param name="cancellationToken">A token that allows for the operation to be cancelled.</param>
            <returns>The newly created entity attached to the underlying EntityManager.</returns>
        </member>
        <member name="M:Cocktail.Factory`1.#ctor(Cocktail.IEntityManagerProvider)">
            <summary>
              Creates a new factory.
            </summary>
            <param name="entityManagerProvider"> The EntityMangerProvider to be used to obtain an EntityManager. </param>
        </member>
        <member name="M:Cocktail.Factory`1.CreateAsync">
            <summary>
            Creates a new entity instance of type T.
            </summary>
            <returns>The newly created entity attached to the underlying EntityManager.</returns>
        </member>
        <member name="M:Cocktail.Factory`1.CreateAsync(System.Threading.CancellationToken)">
            <summary>
            Creates a new entity instance of type T.
            </summary>
            <param name="cancellationToken">A token that allows for the operation to be cancelled.</param>
            <returns>The newly created entity attached to the underlying EntityManager.</returns>
        </member>
        <member name="M:Cocktail.Factory`1.FindFactoryMethod(System.Type,System.Boolean)">
            <summary>
            Locates a suitable factory method for the provided type.
            </summary>
            <param name="type">The type for which a factory method is needed.</param>
            <param name="nonPublic">true if a public or nonpublic method can match; false if only a public method can match.</param>
            <returns>Null if no suitable factory method could be located.</returns>
        </member>
        <member name="P:Cocktail.Factory`1.EntityManager">
            <summary>
              Returns the EntityManager used by this factory.
            </summary>
        </member>
        <member name="T:Cocktail.FakeStoreEntityManagerProviderFns">
            <summary>
            Provides extension methods to initialize and reset the DevForce Fake Backing Store
            </summary>
        </member>
        <member name="M:Cocktail.FakeStoreEntityManagerProviderFns.InitializeFakeBackingStoreAsync``1(Cocktail.IEntityManagerProvider{``0})">
            <summary>Initializes the fake backing store.</summary>
            <returns>Returns true if the EntityManagerProvider supports the fake backing store.</returns>
        </member>
        <member name="M:Cocktail.FakeStoreEntityManagerProviderFns.ResetFakeBackingStoreAsync``1(Cocktail.IEntityManagerProvider{``0})">
            <summary>Resets the fake backing store to its initial state.</summary>
            <returns>Returns true if the EntityManagerProvider supports the fake backing store.</returns>
        </member>
        <member name="T:Cocktail.HarnessViewModel">
            <summary>
              ViewModel implementing the Development Harness. Specify this ViewModel as the root in the Application constructor to create a Development Harness
            </summary>
        </member>
        <member name="M:Cocktail.HarnessViewModel.#ctor(System.Collections.Generic.IEnumerable{Cocktail.IDiscoverableViewModel})">
            <summary>
              Initializes a new instance.
            </summary>
            <param name="viewModels"> The list of discovered ViewModels injected through MEF. </param>
        </member>
        <member name="M:Cocktail.HarnessViewModel.ActivateViewModel(System.String)">
            <summary>
              Activates the ViewModel with the given name.
            </summary>
        </member>
        <member name="P:Cocktail.HarnessViewModel.Names">
            <summary>
              Bindable collection exposing the names of all discovered ViewModels.
            </summary>
        </member>
        <member name="P:Cocktail.HarnessViewModel.ActiveName">
            <summary>
              Returns the name of the current active view model.
            </summary>
        </member>
        <member name="T:Cocktail.ICompositionFactory`1">
            <summary>
              A factory that creates new instances of the specified type.
            </summary>
            <typeparam name="T"> Type of instances to be created. </typeparam>
        </member>
        <member name="M:Cocktail.ICompositionFactory`1.NewInstance">
            <summary>
            Creates and returns a new instance of T.
            </summary>
        </member>
        <member name="T:Cocktail.ICompositionProvider">
            <summary>
              A service providing implementation independent IoC functionality.
            </summary>
        </member>
        <member name="M:Cocktail.ICompositionProvider.GetInstance``1">
            <summary>
              Returns a lazy instance of the specified type.
            </summary>
            <typeparam name="T"> Type of the requested instance. </typeparam>
        </member>
        <member name="M:Cocktail.ICompositionProvider.TryGetInstance``1">
            <summary>
              Returns an instance of the specified type.
            </summary>
            <typeparam name="T"> Type of the requested instance. </typeparam>
            <returns> Null if instance is not present in the container. </returns>
        </member>
        <member name="M:Cocktail.ICompositionProvider.GetInstances``1">
            <summary>
              Returns all instances of the specified type.
            </summary>
            <typeparam name="T"> Type of the requested instances. </typeparam>
        </member>
        <member name="M:Cocktail.ICompositionProvider.GetInstance(System.Type,System.String)">
            <summary>
              Returns a lazy instance that matches the specified name and type.
            </summary>
            <param name="serviceType">The type to match.</param>
            <param name="contractName">The name to match.</param>
        </member>
        <member name="M:Cocktail.ICompositionProvider.TryGetInstance(System.Type,System.String)">
            <summary>
              Returns an instance that matches the specified name and type.
            </summary>
            <param name="serviceType">The type to match.</param>
            <param name="contractName">The name to match.</param>
            <returns> Null if instance is not present in the container. </returns>
        </member>
        <member name="M:Cocktail.ICompositionProvider.GetInstances(System.Type,System.String)">
            <summary>
              Returns all instances that match the specified name and type.
            </summary>
            <param name="serviceType">The type to match.</param>
            <param name="contractName">The name to match.</param>
        </member>
        <member name="M:Cocktail.ICompositionProvider.GetInstanceFactory``1">
            <summary>
              Returns a factory that creates new instances of the specified type.
            </summary>
            <typeparam name="T"> Type of instance the factory creates. </typeparam>
        </member>
        <member name="M:Cocktail.ICompositionProvider.TryGetInstanceFactory``1">
            <summary>
              Returns a factory that creates new instances of the specified type.
            </summary>
            <typeparam name="T"> Type of instance the factory creates. </typeparam>
            <returns> Null if the container cannot provide a factory for the specified type. </returns>
        </member>
        <member name="M:Cocktail.ICompositionProvider.BuildUp(System.Object)">
            <summary>
              Manually performs property dependency injection on the provided instance.
            </summary>
            <param name="instance"> The instance needing property injection. </param>
        </member>
        <member name="M:Cocktail.ICompositionProvider.AddXapAsync(System.String)">
            <summary>Asynchronously downloads a XAP file.</summary>
            <param name="relativeUri">The relative URI for the XAP file to be downloaded.</param>
            <returns>The asynchronous download <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="T:Cocktail.ISupportsRecomposition">
            <summary>
              A special type of CompositionProvider that supports dynamic recompositon at runtime.
            </summary>
        </member>
        <member name="P:Cocktail.ISupportsRecomposition.IsRecomposing">
            <summary>
              Returns true if the CompositionProvider is currently in the process of recomposing.
            </summary>
        </member>
        <member name="E:Cocktail.ISupportsRecomposition.Recomposed">
            <summary>
              Fired to indicate that a recomposition has taken place.
            </summary>
        </member>
        <member name="T:Cocktail.DialogHost">
            <summary>
            A static class that provides access to the current DialogHost from within a hosted ViewModel.
            </summary>
        </member>
        <member name="M:Cocktail.DialogHost.GetCurrent(Caliburn.Micro.IChild)">
            <summary>Returns a reference to the dialog host if the provided ViewModel is currently hosted in the dialog host.</summary>
            <param name="source">The hosted ViewModel.</param>
            <returns>Null if the ViewModel is not currently hosted in a dialog host, otherwise a reference to the current dialog host.</returns>
        </member>
        <member name="T:Cocktail.DialogResult">
            <summary>Represents a user's response to a dialog or message box.</summary>
        </member>
        <member name="F:Cocktail.DialogResult.None">
            <summary>Nothing. This means that the dialog or message box continues running.</summary>
        </member>
        <member name="F:Cocktail.DialogResult.Ok">
            <summary>The user clicked the Ok button.</summary>
        </member>
        <member name="F:Cocktail.DialogResult.Cancel">
            <summary>The user clicked the Cancel button.</summary>
        </member>
        <member name="F:Cocktail.DialogResult.Abort">
            <summary>The user clicked the Abort button.</summary>
        </member>
        <member name="F:Cocktail.DialogResult.Retry">
            <summary>The user clicked the Retry button.</summary>
        </member>
        <member name="F:Cocktail.DialogResult.Ignore">
            <summary>The user clicked the Ignore button.</summary>
        </member>
        <member name="F:Cocktail.DialogResult.Yes">
            <summary>The user clicked the Yes button.</summary>
        </member>
        <member name="F:Cocktail.DialogResult.No">
            <summary>The user clicked the No button.</summary>
        </member>
        <member name="T:Cocktail.DialogButtons">
            <summary>Specifies constants defining which buttons to display on a dialog or message box.</summary>
        </member>
        <member name="F:Cocktail.DialogButtons.Ok">
            <summary>The dialog or message box contains and Ok button.</summary>
        </member>
        <member name="F:Cocktail.DialogButtons.OkCancel">
            <summary>The dialog or message box contains Ok and Cancel buttons.</summary>
        </member>
        <member name="F:Cocktail.DialogButtons.AbortRetryIgnore">
            <summary>The dialog or message box contains Abort, Retry, and Ignore buttons.</summary>
        </member>
        <member name="F:Cocktail.DialogButtons.YesNoCancel">
            <summary>The dialog or message box contains Yes, No, and Cancel buttons.</summary>
        </member>
        <member name="F:Cocktail.DialogButtons.YesNo">
            <summary>The dialog or message box contains Yes and No buttons.</summary>
        </member>
        <member name="F:Cocktail.DialogButtons.RetryCancel">
            <summary>The dialog or message box contains Retry and Cancel buttons.</summary>
        </member>
        <member name="T:Cocktail.Page`1">
            <summary>
              Represents a single page returned by <see cref="T:Cocktail.IPager`1"/>
            </summary>
            <typeparam name="T"> </typeparam>
        </member>
        <member name="M:Cocktail.Page`1.#ctor(System.Int32,System.Boolean,System.Collections.Generic.IEnumerable{`0})">
            <summary>
              Creates and initializes a new Page.
            </summary>
            <param name="pageIndex"> The index of the page moved to. </param>
            <param name="pageWasFound"> Indicates whether the page was found. </param>
            <param name="results"> The data associated with the current page. </param>
        </member>
        <member name="P:Cocktail.Page`1.PageIndex">
            <summary>
              The index of the page moved to.
            </summary>
        </member>
        <member name="P:Cocktail.Page`1.PageWasFound">
            <summary>
              Returns false when the requested page was not found.
            </summary>
        </member>
        <member name="P:Cocktail.Page`1.Results">
            <summary>
              The data associated with the current page.
            </summary>
        </member>
        <member name="T:Cocktail.IPager`1">
            <summary>
              A service which allows paging of entity and object results.
            </summary>
        </member>
        <member name="M:Cocktail.IPager`1.FirstPageAsync">
            <summary>
              Moves to the first page.
            </summary>
            <returns> The first page. </returns>
            <exception cref="T:System.InvalidOperationException">A page change is in progress.</exception>
        </member>
        <member name="M:Cocktail.IPager`1.FirstPageAsync(System.Threading.CancellationToken)">
            <summary>
              Moves to the first page.
            </summary>
            <param name="cancellationToken">A token that allows for the operation to be cancelled.</param>
            <returns> The first page. </returns>
            <exception cref="T:System.InvalidOperationException">A page change is in progress.</exception>
        </member>
        <member name="M:Cocktail.IPager`1.LastPageAsync">
            <summary>
              Moves to the last page.
            </summary>
            <returns> The last page. </returns>
            <exception cref="T:System.InvalidOperationException">A page change is in progress.</exception>
        </member>
        <member name="M:Cocktail.IPager`1.LastPageAsync(System.Threading.CancellationToken)">
            <summary>
              Moves to the last page.
            </summary>
            <param name="cancellationToken">A token that allows for the operation to be cancelled.</param>
            <returns> The last page. </returns>
            <exception cref="T:System.InvalidOperationException">A page change is in progress.</exception>
        </member>
        <member name="M:Cocktail.IPager`1.NextPageAsync">
            <summary>
              Moves to the page after the current page.
            </summary>
            <returns> The next page. </returns>
            <exception cref="T:System.InvalidOperationException">A page change is in progress.</exception>
        </member>
        <member name="M:Cocktail.IPager`1.NextPageAsync(System.Threading.CancellationToken)">
            <summary>
              Moves to the page after the current page.
            </summary>
            <param name="cancellationToken">A token that allows for the operation to be cancelled.</param>
            <returns> The next page. </returns>
            <exception cref="T:System.InvalidOperationException">A page change is in progress.</exception>
        </member>
        <member name="M:Cocktail.IPager`1.PreviousPageAsync">
            <summary>
              Moves to the page before the current page.
            </summary>
            <returns> The previous page. </returns>
            <exception cref="T:System.InvalidOperationException">A page change is in progress.</exception>
        </member>
        <member name="M:Cocktail.IPager`1.PreviousPageAsync(System.Threading.CancellationToken)">
            <summary>
              Moves to the page before the current page.
            </summary>
            <param name="cancellationToken">A token that allows for the operation to be cancelled.</param>
            <returns> The previous page. </returns>
            <exception cref="T:System.InvalidOperationException">A page change is in progress.</exception>
        </member>
        <member name="M:Cocktail.IPager`1.GoToPageAsync(System.Int32)">
            <summary>
              Moves to the specified page.
            </summary>
            <param name="pageIndex"> The zero-based index of the requested page. </param>
            <returns> The requested page. </returns>
            <exception cref="T:System.InvalidOperationException">A page change is in progress.</exception>
        </member>
        <member name="M:Cocktail.IPager`1.GoToPageAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
              Moves to the specified page.
            </summary>
            <param name="pageIndex"> The zero-based index of the requested page. </param>
            <param name="cancellationToken">A token that allows for the operation to be cancelled.</param>
            <returns> The requested page. </returns>
            <exception cref="T:System.InvalidOperationException">A page change is in progress.</exception>
        </member>
        <member name="P:Cocktail.IPager`1.PageSize">
            <summary>
              Returns the number of records requested for each page.
            </summary>
        </member>
        <member name="P:Cocktail.IPager`1.IsPageChanging">
            <summary>
            Returns true if a page change is in progress.
            </summary>
        </member>
        <member name="P:Cocktail.IPager`1.TotalDataSourceItemCount">
            <summary>
              Returns the number of records available to be returned from the back-end data source.
            </summary>
            <remarks>
              This property will return -1 until the last page is fetched via a call to LastPageAsync() /> .
            </remarks>
        </member>
        <member name="P:Cocktail.IPager`1.TotalItemCount">
            <summary>
              Returns the total number of items returned.
            </summary>
            <remarks>
              This property will return -1 until all pages are fetched or the <see cref="P:Cocktail.IPager`1.TotalDataSourceItemCount"/> is known. The number will be an approximation when a large number of inserts and deletes have occurred.
            </remarks>
        </member>
        <member name="P:Cocktail.IPager`1.TotalNumberOfPages">
            <summary>
            Returns the total number of pages.
            </summary>
            <remarks>
              This property will return -1 until all pages are fetched or the <see cref="P:Cocktail.IPager`1.TotalDataSourceItemCount"/> is known. The number will be an approximation when a large number of inserts and deletes have occurred.
            </remarks>
        </member>
        <member name="P:Cocktail.IPager`1.CurrentPage">
            <summary>
            Returns the current page.
            </summary>
        </member>
        <member name="T:Cocktail.IPagerRepository`1">
            <summary>
              Interface to be implemented by a repository supporting paging.
            </summary>
            <typeparam name="T"> The type of entity this repository retrieves. </typeparam>
        </member>
        <member name="T:Cocktail.IRepository`1">
            <summary>
              Interface to be implemented by a repository.
            </summary>
            <typeparam name="T"> The type of entity this repository retrieves. </typeparam>
        </member>
        <member name="M:Cocktail.IRepository`1.WithIdAsync(System.Object)">
            <summary>
              Retrieves the entity matching the provided key with the repository's default query strategy.
            </summary>
            <param name="keyValue"> The single primary key value. </param>
            <returns> The retrieved entity. </returns>
            <exception cref="T:Cocktail.EntityNotFoundException">A single entity matching the provided key was not found.</exception>
        </member>
        <member name="M:Cocktail.IRepository`1.WithIdAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
              Retrieves the entity matching the provided key with the repository's default query strategy.
            </summary>
            <param name="keyValue"> The single primary key value. </param>
            <param name="cancellationToken"> A token that allows for the operation to be cancelled. </param>
            <returns> The retrieved entity. </returns>
            <exception cref="T:Cocktail.EntityNotFoundException">A single entity matching the provided key was not found.</exception>
        </member>
        <member name="M:Cocktail.IRepository`1.WithIdFromDataSourceAsync(System.Object)">
            <summary>
              Retrieves the entity matching the provided key from the back-end data source.
            </summary>
            <param name="keyValue"> The single primary key value. </param>
            <returns> The retrieved entity. </returns>
            <exception cref="T:Cocktail.EntityNotFoundException">A single entity matching the provided key was not found.</exception>
        </member>
        <member name="M:Cocktail.IRepository`1.WithIdFromDataSourceAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
              Retrieves the entity matching the provided key from the back-end data source.
            </summary>
            <param name="keyValue"> The single primary key value. </param>
            <param name="cancellationToken"> A token that allows for the operation to be cancelled. </param>
            <returns> The retrieved entity. </returns>
            <exception cref="T:Cocktail.EntityNotFoundException">A single entity matching the provided key was not found.</exception>
        </member>
        <member name="M:Cocktail.IRepository`1.WithIdAsync(System.Object[])">
            <summary>
              Retrieves the entity matching the provided key with the repository's default query strategy.
            </summary>
            <param name="keyValues"> The composite primary key values. </param>
            <returns> The retrieved entity. </returns>
            <exception cref="T:Cocktail.EntityNotFoundException">A single entity matching the provided key was not found.</exception>
        </member>
        <member name="M:Cocktail.IRepository`1.WithIdAsync(System.Object[],System.Threading.CancellationToken)">
            <summary>
              Retrieves the entity matching the provided key with the repository's default query strategy.
            </summary>
            <param name="keyValues"> The composite primary key values. </param>
            <param name="cancellationToken"> A token that allows for the operation to be cancelled. </param>
            <returns> The retrieved entity. </returns>
            <exception cref="T:Cocktail.EntityNotFoundException">A single entity matching the provided key was not found.</exception>
        </member>
        <member name="M:Cocktail.IRepository`1.WithIdFromDataSourceAsync(System.Object[])">
            <summary>
              Retrieves the entity matching the provided key from the back-end data source.
            </summary>
            <param name="keyValues"> The composite primary key values. </param>
            <returns> The retrieved entity. </returns>
            <exception cref="T:Cocktail.EntityNotFoundException">A single entity matching the provided key was not found.</exception>
        </member>
        <member name="M:Cocktail.IRepository`1.WithIdFromDataSourceAsync(System.Object[],System.Threading.CancellationToken)">
            <summary>
              Retrieves the entity matching the provided key from the back-end data source.
            </summary>
            <param name="keyValues"> The composite primary key values. </param>
            <param name="cancellationToken"> A token that allows for the operation to be cancelled. </param>
            <returns> The retrieved entity. </returns>
            <exception cref="T:Cocktail.EntityNotFoundException">A single entity matching the provided key was not found.</exception>
        </member>
        <member name="M:Cocktail.IRepository`1.WithIdFromCache(System.Object[])">
            <summary>
              Retrieves the entity matching the provided key from the entity cache.
            </summary>
            <param name="keyValues"> The primary key values. </param>
            <returns> The retrieved entity. </returns>
            <exception cref="T:Cocktail.EntityNotFoundException">A single entity matching the provided key was not found.</exception>
        </member>
        <member name="M:Cocktail.IRepository`1.AllAsync(System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Action{Cocktail.IFetchOptions{`0}})">
            <summary>
              Retrieves all entities with the repository's default query strategy.
            </summary>
            <param name="orderBy"> Optional sorting function to sort the returned list of entities. </param>
            <param name="fetchOptions">Optional delegate to specify additional fetching options.</param>
            <returns> The list of retrieved entities. </returns>
        </member>
        <member name="M:Cocktail.IRepository`1.AllAsync(System.Threading.CancellationToken,System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Action{Cocktail.IFetchOptions{`0}})">
            <summary>
              Retrieves all entities with the repository's default query strategy.
            </summary>
            <param name="cancellationToken"> A token that allows for the operation to be cancelled. </param>
            <param name="orderBy"> Optional sorting function to sort the returned list of entities. </param>
            <param name="fetchOptions">Optional delegate to specify additional fetching options.</param>
            <returns> The list of retrieved entities. </returns>
        </member>
        <member name="M:Cocktail.IRepository`1.AllInDataSourceAsync(System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Action{Cocktail.IFetchOptions{`0}})">
            <summary>
              Retrieves all entities from the back-end data source.
            </summary>
            <param name="orderBy"> Optional sorting function to sort the returned list of entities. </param>
            <param name="fetchOptions">Optional delegate to specify additional fetching options.</param>
            <returns> The list of retrieved entities. </returns>
        </member>
        <member name="M:Cocktail.IRepository`1.AllInDataSourceAsync(System.Threading.CancellationToken,System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Action{Cocktail.IFetchOptions{`0}})">
            <summary>
              Retrieves all entities from the back-end data source.
            </summary>
            <param name="cancellationToken"> A token that allows for the operation to be cancelled. </param>
            <param name="orderBy"> Optional sorting function to sort the returned list of entities. </param>
            <param name="fetchOptions">Optional delegate to specify additional fetching options.</param>
            <returns> The list of retrieved entities. </returns>
        </member>
        <member name="M:Cocktail.IRepository`1.AllInCache(System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Action{Cocktail.IFetchOptions{`0}})">
            <summary>
              Retrieves all entities from the cache.
            </summary>
            <param name="orderBy"> Optional sorting function to sort the returned list of entities. </param>
            <param name="fetchOptions">Optional delegate to specify additional fetching options.</param>
            <returns> The list of retrieved entities. </returns>
        </member>
        <member name="M:Cocktail.IRepository`1.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
              Returns the number of entities.
            </summary>
            <param name="predicate"> Optional predicate to filter the entities </param>
            <returns> The number of entities matching the optional expression. </returns>
        </member>
        <member name="M:Cocktail.IRepository`1.CountInCache(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
              Returns the number of entities in the cache.
            </summary>
            <param name="predicate"> Optional predicate to filter the entities </param>
            <returns> The number of entities matching the optional expression. </returns>
        </member>
        <member name="M:Cocktail.IRepository`1.FindAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Action{Cocktail.IFetchOptions{`0}})">
            <summary>
              Retrieves one or more entities matching the provided expression with the repository's default query strategy.
            </summary>
            <param name="predicate"> Optional predicate to filter the returned list of entities </param>
            <param name="orderBy"> Optional sorting function to sort the returned list of entities. </param>
            <param name="fetchOptions">Optional delegate to specify additional fetching options.</param>
            <returns> The list of retrieved entities. </returns>
        </member>
        <member name="M:Cocktail.IRepository`1.FindAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken,System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Action{Cocktail.IFetchOptions{`0}})">
            <summary>
              Retrieves one or more entities matching the provided expression with the repository's default query strategy.
            </summary>
            <param name="predicate"> Optional predicate to filter the returned list of entities </param>
            <param name="cancellationToken"> A token that allows for the operation to be cancelled. </param>
            <param name="orderBy"> Optional sorting function to sort the returned list of entities. </param>
            <param name="fetchOptions">Optional delegate to specify additional fetching options.</param>
            <returns> The list of retrieved entities. </returns>
        </member>
        <member name="M:Cocktail.IRepository`1.FindAsync``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{``0},System.Linq.IOrderedQueryable{``0}},System.Action{Cocktail.IFetchOptions{``0}})">
            <summary>
              Retrieves one or more entities matching the provided expression with the repository's default query strategy and projects the results into a different shape using the selector parameter.
            </summary>
            <param name="selector"> The selector used to shape the result. </param>
            <param name="predicate"> Optional predicate to filter the returned list of objects. </param>
            <param name="orderBy"> Optional sorting function to sort the returned list of objects. </param>
            <param name="fetchOptions">Optional delegate to specify additional fetching options.</param>
            <returns> The list of retrieved objects. </returns>
        </member>
        <member name="M:Cocktail.IRepository`1.FindAsync``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Threading.CancellationToken,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{``0},System.Linq.IOrderedQueryable{``0}},System.Action{Cocktail.IFetchOptions{``0}})">
            <summary>
              Retrieves one or more entities matching the provided expression with the repository's default query strategy and projects the results into a different shape using the selector parameter.
            </summary>
            <param name="selector"> The selector used to shape the result. </param>
            <param name="cancellationToken"> A token that allows for the operation to be cancelled. </param>
            <param name="predicate"> Optional predicate to filter the returned list of objects. </param>
            <param name="orderBy"> Optional sorting function to sort the returned list of objects. </param>
            <param name="fetchOptions">Optional delegate to specify additional fetching options.</param>
            <returns> The list of retrieved objects. </returns>
        </member>
        <member name="M:Cocktail.IRepository`1.FindAsync(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable,System.Linq.IOrderedQueryable},System.Action{Cocktail.IFetchOptions})">
            <summary>
              Retrieves one or more entities matching the provided expression with the repository's default query strategy and projects the results into a different shape using the selector parameter.
            </summary>
            <param name="selector"> The selector used to shape the result. </param>
            <param name="predicate"> Optional predicate to filter the returned list of objects. </param>
            <param name="orderBy"> Optional sorting function to sort the returned list of objects. </param>
            <param name="fetchOptions">Optional delegate to specify additional fetching options.</param>
            <returns> The list of retrieved objects. </returns>
        </member>
        <member name="M:Cocktail.IRepository`1.FindAsync(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable},System.Threading.CancellationToken,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable,System.Linq.IOrderedQueryable},System.Action{Cocktail.IFetchOptions})">
            <summary>
              Retrieves one or more entities matching the provided expression with the repository's default query strategy and projects the results into a different shape using the selector parameter.
            </summary>
            <param name="selector"> The selector used to shape the result. </param>
            <param name="cancellationToken"> A token that allows for the operation to be cancelled. </param>
            <param name="predicate"> Optional predicate to filter the returned list of objects. </param>
            <param name="orderBy"> Optional sorting function to sort the returned list of objects. </param>
            <param name="fetchOptions">Optional delegate to specify additional fetching options.</param>
            <returns> The list of retrieved objects. </returns>
        </member>
        <member name="M:Cocktail.IRepository`1.FindInDataSourceAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Action{Cocktail.IFetchOptions{`0}})">
            <summary>
              Retrieves one or more entities matching the provided expression from the back-end data source.
            </summary>
            <param name="predicate"> Optional predicate to filter the returned list of entities </param>
            <param name="orderBy"> Optional sorting function to sort the returned list of entities. </param>
            <param name="fetchOptions">Optional delegate to specify additional fetching options.</param>
            <returns> The list of retrieved entities. </returns>
        </member>
        <member name="M:Cocktail.IRepository`1.FindInDataSourceAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken,System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Action{Cocktail.IFetchOptions{`0}})">
            <summary>
              Retrieves one or more entities matching the provided expression from the back-end data source.
            </summary>
            <param name="predicate"> Optional predicate to filter the returned list of entities </param>
            <param name="cancellationToken"> A token that allows for the operation to be cancelled. </param>
            <param name="orderBy"> Optional sorting function to sort the returned list of entities. </param>
            <param name="fetchOptions">Optional delegate to specify additional fetching options.</param>
            <returns> The list of retrieved entities. </returns>
        </member>
        <member name="M:Cocktail.IRepository`1.FindInDataSourceAsync``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{``0},System.Linq.IOrderedQueryable{``0}},System.Action{Cocktail.IFetchOptions{``0}})">
            <summary>
              Retrieves one or more entities matching the provided expression from the back-end data source and projects the results into a different shape using the selector parameter.
            </summary>
            <param name="selector"> The selector used to shape the result. </param>
            <param name="predicate"> Optional predicate to filter the returned list of objects. </param>
            <param name="orderBy"> Optional sorting function to sort the returned list of objects. </param>
            <param name="fetchOptions">Optional delegate to specify additional fetching options.</param>
            <returns> The list of retrieved objects. </returns>
        </member>
        <member name="M:Cocktail.IRepository`1.FindInDataSourceAsync``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Threading.CancellationToken,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{``0},System.Linq.IOrderedQueryable{``0}},System.Action{Cocktail.IFetchOptions{``0}})">
            <summary>
              Retrieves one or more entities matching the provided expression from the back-end data source and projects the results into a different shape using the selector parameter.
            </summary>
            <param name="selector"> The selector used to shape the result. </param>
            <param name="cancellationToken"> A token that allows for the operation to be cancelled. </param>
            <param name="predicate"> Optional predicate to filter the returned list of objects. </param>
            <param name="orderBy"> Optional sorting function to sort the returned list of objects. </param>
            <param name="fetchOptions">Optional delegate to specify additional fetching options.</param>
            <returns> The list of retrieved objects. </returns>
        </member>
        <member name="M:Cocktail.IRepository`1.FindInDataSourceAsync(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable,System.Linq.IOrderedQueryable},System.Action{Cocktail.IFetchOptions})">
            <summary>
              Retrieves one or more entities matching the provided expression from the back-end data source and projects the results into a different shape using the selector parameter.
            </summary>
            <param name="selector"> The selector used to shape the result. </param>
            <param name="predicate"> Optional predicate to filter the returned list of objects. </param>
            <param name="orderBy"> Optional sorting function to sort the returned list of objects. </param>
            <param name="fetchOptions">Optional delegate to specify additional fetching options.</param>
            <returns> The list of retrieved objects. </returns>
        </member>
        <member name="M:Cocktail.IRepository`1.FindInDataSourceAsync(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable},System.Threading.CancellationToken,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable,System.Linq.IOrderedQueryable},System.Action{Cocktail.IFetchOptions})">
            <summary>
              Retrieves one or more entities matching the provided expression from the back-end data source and projects the results into a different shape using the selector parameter.
            </summary>
            <param name="selector"> The selector used to shape the result. </param>
            <param name="cancellationToken"> A token that allows for the operation to be cancelled. </param>
            <param name="predicate"> Optional predicate to filter the returned list of objects. </param>
            <param name="orderBy"> Optional sorting function to sort the returned list of objects. </param>
            <param name="fetchOptions">Optional delegate to specify additional fetching options.</param>
            <returns> The list of retrieved objects. </returns>
        </member>
        <member name="M:Cocktail.IRepository`1.FindInCache(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Action{Cocktail.IFetchOptions{`0}})">
            <summary>
              Retrieves one or more entities matching the provided expression from the cache.
            </summary>
            <param name="predicate"> Optional predicate to filter the returned list of entities </param>
            <param name="orderBy"> Optional sorting function to sort the returned list of entities. </param>
            <param name="fetchOptions">Optional delegate to specify additional fetching options.</param>
            <returns> The list of retrieved entities. </returns>
        </member>
        <member name="M:Cocktail.IRepository`1.FindInCache``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{``0},System.Linq.IOrderedQueryable{``0}},System.Action{Cocktail.IFetchOptions{``0}})">
            <summary>
              Retrieves one or more entities matching the provided expression from the cache and projects the results into a different shape using the selector parameter.
            </summary>
            <param name="selector"> The selector used to shape the result. </param>
            <param name="predicate"> Optional predicate to filter the returned list of objects. </param>
            <param name="orderBy"> Optional sorting function to sort the returned list of objects. </param>
            <param name="fetchOptions">Optional delegate to specify additional fetching options.</param>
            <returns> The list of retrieved objects. </returns>
        </member>
        <member name="M:Cocktail.IRepository`1.FindInCache(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable,System.Linq.IOrderedQueryable},System.Action{Cocktail.IFetchOptions})">
            <summary>
              Retrieves one or more entities matching the provided expression from the cache and projects the results into a different shape using the selector parameter.
            </summary>
            <param name="selector"> The selector used to shape the result. </param>
            <param name="predicate"> Optional predicate to filter the returned list of objects. </param>
            <param name="orderBy"> Optional sorting function to sort the returned list of objects. </param>
            <param name="fetchOptions">Optional delegate to specify additional fetching options.</param>
            <returns> The list of retrieved objects. </returns>
        </member>
        <member name="M:Cocktail.IRepository`1.Delete(`0)">
            <summary>
              Marks the specified entity as to be deleted.
            </summary>
            <param name="entity"> Entity to be deleted. </param>
        </member>
        <member name="M:Cocktail.IRepository`1.Delete(System.Collections.Generic.IEnumerable{`0})">
            <summary>
              Marks the specified entities as to be deleted.
            </summary>
            <param name="entities"> Entities to be deleted. </param>
        </member>
        <member name="M:Cocktail.IRepository`1.ExistsInCache(System.Object[])">
            <summary>
              Returns true if the entity matching the provided key is found in the cache.
            </summary>
            <param name="keyValues"> The primary key values </param>
        </member>
        <member name="M:Cocktail.IPagerRepository`1.Pager(IdeaBlade.Core.ISortSelector,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Action{Cocktail.IFetchOptions{`0}})">
            <summary>
              Returns a pager which allows entities to be paged.
            </summary>
            <param name="sortSelector"> Required sorting criteria. </param>
            <param name="pageSize"> The desired page size. </param>
            <param name="predicate"> Optional predicate to filter the paged entities. </param>
            <param name="fetchOptions"></param>
            <returns> <see cref="T:Cocktail.IPager`1"/> which allows the entities to be paged. </returns>
        </member>
        <member name="M:Cocktail.IPagerRepository`1.Pager``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Int32,IdeaBlade.Core.ISortSelector,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Action{Cocktail.IFetchOptions{``0}})">
            <summary>
              Returns a pager which allows shaped entities to be paged.
            </summary>
            <param name="selector"> The selector used to shape the entities. </param>
            <param name="pageSize"> The desired page size. </param>
            <param name="sortSelector"> Required sorting criteria. </param>
            <param name="predicate"> Optional predicate to filter the paged entities. </param>
            <param name="fetchOptions"></param>
            <typeparam name="TResult"> The shape of the result. </typeparam>
            <returns> <see cref="T:Cocktail.IPager`1"/> which allows the shaped entities to be paged. </returns>
        </member>
        <member name="T:Cocktail.IFetchOptions">
            <summary>
            A fluent interface to specify additional data fetching options.
            </summary>
        </member>
        <member name="M:Cocktail.IFetchOptions.Skip(System.Int32)">
            <summary>
            Bypasses a specified number of elements in a sequence and then returns the remaining elements.
            </summary>
            <param name="count">The number of elements to skip before returning the remaining elements.</param>
        </member>
        <member name="M:Cocktail.IFetchOptions.Take(System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the start of a sequence.
            </summary>
            <param name="count">The number of elements to return.</param>
            <returns></returns>
        </member>
        <member name="M:Cocktail.IFetchOptions.Distinct">
            <summary>
            Returns distinct elements from a sequence.
            </summary>
        </member>
        <member name="M:Cocktail.IFetchOptions.Include(System.String)">
            <summary>
            Configures eager fetching for related entities in the specified query path.
            </summary>
            <param name="propertyPath">Dot-separated list of navigation properties that describe the query path in the graph that should be eagerly fetched.</param>
        </member>
        <member name="T:Cocktail.IFetchOptions`1">
            <summary>
            A fluent generic interface to specify additional data fetching options.
            </summary>
        </member>
        <member name="M:Cocktail.IFetchOptions`1.Skip(System.Int32)">
            <summary>
            Bypasses a specified number of elements in a sequence and then returns the remaining elements.
            </summary>
            <param name="count">The number of elements to skip before returning the remaining elements.</param>
        </member>
        <member name="M:Cocktail.IFetchOptions`1.Take(System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the start of a sequence.
            </summary>
            <param name="count">The number of elements to return.</param>
            <returns></returns>
        </member>
        <member name="M:Cocktail.IFetchOptions`1.Distinct">
            <summary>
            Returns distinct elements from a sequence.
            </summary>
        </member>
        <member name="M:Cocktail.IFetchOptions`1.Include(System.String)">
            <summary>
            Configures eager fetching for related entities in the specified query path.
            </summary>
            <param name="propertyPath">Dot-separated list of navigation properties that describe the query path in the graph that should be eagerly fetched.</param>
        </member>
        <member name="M:Cocktail.IFetchOptions`1.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Configures eager fetching for related entities in the specified query path.
            </summary>
            <param name="expr">An expression returning the navigation property.</param>
            <returns></returns>
        </member>
        <member name="T:Cocktail.IUnitOfWork">
            <summary>
              Interface to be implemented by a unit of work.
            </summary>
        </member>
        <member name="M:Cocktail.IUnitOfWork.Clear">
            <summary>
            Resets the UnitOfWork to its initial state.
            </summary>
        </member>
        <member name="M:Cocktail.IUnitOfWork.HasChanges">
            <summary>
              Returns true if the unit of work contains pending changes.
            </summary>
        </member>
        <member name="M:Cocktail.IUnitOfWork.HasEntity(System.Object)">
            <summary>
            Returns true if the provided entity is attached to the current UnitOfWork's EntityManager.
            </summary>
            <param name="entity">Entity to check if attached to current UnitOfWork.</param>
        </member>
        <member name="M:Cocktail.IUnitOfWork.CommitAsync">
            <summary>
              Commits all pending changes to the underlying data source.
            </summary>
        </member>
        <member name="M:Cocktail.IUnitOfWork.Rollback">
            <summary>
              Rolls back all pending changes.
            </summary>
        </member>
        <member name="E:Cocktail.IUnitOfWork.EntityChanged">
            <summary>
              Fired whenever an entity associated with the current unit of work has changed in any significant manner.
            </summary>
        </member>
        <member name="T:Cocktail.IUnitOfWork`1">
            <summary>
              Interface to be implemented by a simple unit of work with a single entity.
            </summary>
            <typeparam name="T"> The type of entity used with this unit of work. </typeparam>
        </member>
        <member name="P:Cocktail.IUnitOfWork`1.Factory">
            <summary>
              The factory to create new entity instances.
            </summary>
        </member>
        <member name="P:Cocktail.IUnitOfWork`1.Entities">
            <summary>
              The repository to retrieve entities.
            </summary>
        </member>
        <member name="T:Cocktail.LogFns">
            <summary>
            A collection of static methods used to provide code assertions, tracing and logging functionality.
            </summary>
            <remarks><see cref="F:Cocktail.TraceLogger.LogWriter"/> can be used to redirect the output.</remarks>
        </member>
        <member name="M:Cocktail.LogFns.DebugWriteLine(System.Object)">
            <summary>
            Write a string representation of an object to the log for debug builds of Cocktail applications.
            </summary>
            <param name="aObject">The object to be written to the log.</param>
        </member>
        <member name="M:Cocktail.LogFns.DebugWriteLineIf(System.Boolean,System.Object)">
            <summary>
            Write a string representation of an object to the log for debug builds of Cocktail if the specified condition is true.
            </summary>
            <param name="condition"></param>
            <param name="aObject">The object to be written to the log.</param>
        </member>
        <member name="M:Cocktail.LogFns.TraceWriteLine(System.Object)">
            <summary>
            Write a string representation of an object to the log.
            </summary>
            <param name="aObject">The object to be written to the log.</param>
        </member>
        <member name="M:Cocktail.LogFns.TraceWriteLineIf(System.Boolean,System.Object)">
            <summary>
            Write a string representation of an object to the log if the specified condition is true.
            </summary>
            <param name="condition"></param>
            <param name="aObject">The object to be written to the log.</param>
        </member>
        <member name="T:Cocktail.MefCompositionFactory`1">
            <summary>
            An implementation of <see cref="T:Cocktail.ICompositionFactory`1"/> which creates new instances using MEF /&gt;.
            </summary>
        </member>
        <member name="M:Cocktail.MefCompositionFactory`1.NewInstance">
            <summary>
            Creates and returns a new instance of T.
            </summary>
        </member>
        <member name="P:Cocktail.MefCompositionFactory`1.ExportFactory">
            <summary>
            Internal use.
            </summary>
        </member>
        <member name="T:Cocktail.MefCompositionProvider">
            <summary>
              An implementation of <see cref="T:Cocktail.ICompositionProvider"/> which uses MEF as the underlying IoC implementation.
            </summary>
        </member>
        <member name="M:Cocktail.MefCompositionProvider.GetInstance``1">
            <summary>
              Returns a lazy instance of the specified type.
            </summary>
            <typeparam name="T"> Type of the requested instance. </typeparam>
            <returns> The requested instance. </returns>
        </member>
        <member name="M:Cocktail.MefCompositionProvider.GetInstances``1">
            <summary>
              Returns all instances of the specified type.
            </summary>
            <typeparam name="T"> Type of the requested instances. </typeparam>
            <returns> The requested instances. </returns>
        </member>
        <member name="M:Cocktail.MefCompositionProvider.GetInstance(System.Type,System.String)">
            <summary>
              Returns a lazy instance of the provided type or with the specified contract name or both.
            </summary>
            <param name="serviceType"> The type of the requested instance. If no type is specified the contract name will be used. </param>
            <param name="contractName"> The contract name of the instance requested. If no contract name is specified, the type will be used. </param>
            <returns> The requested instance. </returns>
        </member>
        <member name="M:Cocktail.MefCompositionProvider.GetInstances(System.Type,System.String)">
            <summary>
              Returns all lazy instances of the provided type.
            </summary>
            <param name="serviceType"> The type of the requested instance. If no type is specified the contract name will be used. </param>
            <param name="contractName"> The contract name of the instance requested. If no contract name is specified, the type will be used. </param>
            <returns> The requested instances. </returns>
        </member>
        <member name="M:Cocktail.MefCompositionProvider.BuildUp(System.Object)">
            <summary>
              Manually performs property dependency injection on the provided instance.
            </summary>
            <param name="instance"> The instance needing property injection. </param>
        </member>
        <member name="M:Cocktail.MefCompositionProvider.IsTypeRegistered``1">
            <summary>
              Returns true if the provided type has been previously registered.
            </summary>
        </member>
        <member name="M:Cocktail.MefCompositionProvider.Configure(System.ComponentModel.Composition.Hosting.CompositionBatch,System.ComponentModel.Composition.Primitives.ComposablePartCatalog)">
            <summary>
              Configures the CompositionHost.
            </summary>
            <param name="compositionBatch"> Optional changes to the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer"/> to include during the composition. </param>
            <param name="catalog"> The custom catalog to be used by Cocktail to get access to MEF exports. </param>
        </member>
        <member name="M:Cocktail.MefCompositionProvider.Compose(System.ComponentModel.Composition.Hosting.CompositionBatch)">
            <summary>
              Executes composition on the container, including the changes in the specified <see cref="T:System.ComponentModel.Composition.Hosting.CompositionBatch"/> .
            </summary>
            <param name="compositionBatch"> Changes to the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer"/> to include during the composition. </param>
        </member>
        <member name="M:Cocktail.MefCompositionProvider.AddXapAsync(System.String)">
            <summary>Asynchronously downloads a XAP file and adds all exported parts to the catalog.</summary>
            <param name="relativeUri">The relative URI for the XAP file to be downloaded.</param>
            <returns>The asynchronous download <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="P:Cocktail.MefCompositionProvider.Catalog">
            <summary>
              Returns the current catalog in use.
            </summary>
            <returns> Unless a custom catalog is provided through <see cref="M:Cocktail.MefCompositionProvider.Configure(System.ComponentModel.Composition.Hosting.CompositionBatch,System.ComponentModel.Composition.Primitives.ComposablePartCatalog)"/> , this property returns <see cref="P:Cocktail.MefCompositionProvider.DefaultCatalog"/> </returns>
        </member>
        <member name="P:Cocktail.MefCompositionProvider.DefaultCatalog">
            <summary>
              Returns the default catalog in use by DevForce.
            </summary>
        </member>
        <member name="P:Cocktail.MefCompositionProvider.Container">
            <summary>
              Returns the CompositionContainer in use.
            </summary>
        </member>
        <member name="P:Cocktail.MefCompositionProvider.IsRecomposing">
            <summary>
              Returns true if the CompositionProvider is currently in the process of recomposing.
            </summary>
        </member>
        <member name="E:Cocktail.MefCompositionProvider.Recomposed">
            <summary>
              Fired when the composition container is modified after initialization.
            </summary>
        </member>
        <member name="T:Cocktail.MessageBoxBase">
            <summary>The base view model implementing a message box.</summary>
            <remarks>To customize the message box, subclass MessageBoxBase and implement a custom view to match the subclassed view model.</remarks>
        </member>
        <member name="M:Cocktail.MessageBoxBase.Start(System.String)">
            <summary>
            Initializes and Starts the message box.
            </summary>
            <param name="message">The message to display.</param>
            <returns></returns>
        </member>
        <member name="P:Cocktail.MessageBoxBase.Message">
            <summary>
            Returns the message to display.
            </summary>
        </member>
        <member name="T:Cocktail.MessageBoxView">
            <summary>
            Internal use.
            </summary>
        </member>
        <member name="M:Cocktail.MessageBoxView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Cocktail.IDiscoverableViewModel">
            <summary>
            Marker interface to make a ViewModel discoverable. 
            
            This interface is leveraged by the Development Harness to automatically
            generate a list of views that can be launched.
            </summary>
        </member>
        <member name="T:Cocktail.IHarnessAware">
            <summary>Implement IHarnessAware to provide setup logic for when the ViewModel is launched inside of the development harness.</summary>
        </member>
        <member name="M:Cocktail.IHarnessAware.Setup">
            <summary>Provides the setup logic to be run before the ViewModel is activated inside of the development harness.</summary>
        </member>
        <member name="T:Cocktail.ISampleDataProvider`1">
            <summary>Interface for a SampleDataProvider. 
            SampleDataProviders are used during design time and by FakeStoreEntityManagerProviders
            to provide sample data.
            Multiple SampleDataProviders are supported. The Framework will discover all providers
            and combine the sample data.
            Each SampleDataProvider must be exported in order to be discovered by the framework.</summary>
            <typeparam name="T">The type of EntityManager supported by this SampleDataProvider</typeparam>
            <example>
            	<code title="Static export of a SampleDataProvider" description="Illustrates how to statically export a SampleDataProvider" lang="CS">
                [Export(typeof(ISampleDataProvider&lt;NorthwindIBEntities&gt;))]
                public class SampleDataProvider : ISampleDataProvider&lt;NorthwindIBEntities&gt;
                {
                    #region ISampleDataProvider&lt;NorthwindIBEntities&gt; Members
             
                    void ISampleDataProvider&lt;NorthwindIBEntities&gt;.AddSampleData(NorthwindIBEntities manager)
                    {
                        ...
                    }
             
                    #endregion
                }</code>
            	<code title="Dynamic export of SampleDataProvider at runtime" description="Illustrates how to programatically inject a specific SampleDataProvider at runtime." lang="CS">
                public class SampleDataProvider : ISampleDataProvider&lt;NorthwindIBEntities&gt;
                {
                    #region ISampleDataProvider&lt;NorthwindIBEntities&gt; Members
             
                    void ISampleDataProvider&lt;NorthwindIBEntities&gt;.AddSampleData(NorthwindIBEntities manager)
                    {
                        ...
                    }
             
                    #endregion
                }
             
                // Typically performed in Application Bootstrapper
                var batch = new CompositionBatch();
                batch.AddExportedValue&lt;ISampleDataProvider&lt;NorthwindIBEntities&gt;&gt;(new SampleDataProvider());
                Composition.Configure(batch);
            </code>
            </example>
        </member>
        <member name="M:Cocktail.ISampleDataProvider`1.AddSampleData(`0)">
            <summary>This method is called by the EntityManagerProvider to initialize the EntityManager cache with sample data. Use EntityManager.AttachEntities or
            EntityManager.CacheStateManager.RestoreCacheState() to populate the cache with sample data. The latter is useful to popluate the EntityManager with previously
            saved data.</summary>
            <param name="manager">The EntityManager that needs to be populated with the sample data.</param>
        </member>
        <member name="T:Cocktail.IValidationErrorNotification">
            <summary>Implement this interface to be notified of validation errors during a save. The framework automatically performs validation before saving changed
            entities. If any validation errors occur, the save is aborted and any implementation of IValidationErrorNotification is notified of the error(s).</summary>
            <example>
            	<code title="Example" description="In this example, the implementation of IValidationErrorNotification publishes a message to the UI EventAggregator for consumption by any view model and processing of the validation error." lang="CS">
            // Create this implementation as a singleton.
            [PartCreationPolicy(CreationPolicy.Shared)]
            public class ValidationErrorProcessor : IValidationErrorNotification
            {
                // Let the UI know that a validation error occurred.
                public OnValidationError(VerifierResultCollection validationErrors)
                {
                    EventFns.Publish(new HandleValidationErrors(validationErrors));
                }
            }</code>
            </example>
        </member>
        <member name="M:Cocktail.IValidationErrorNotification.OnValidationError(IdeaBlade.Validation.VerifierResultCollection)">
            <summary>Method called by the framework if validation errors occurred during the save.</summary>
            <param name="validationErrors">Collection containing all validation errors.</param>
        </member>
        <member name="T:Cocktail.INavigatorConfigurator">
            <summary>
              Interface used to configure a NavigationService.
            </summary>
        </member>
        <member name="M:Cocktail.INavigatorConfigurator.WithActiveItemGuard(System.Func{System.Object,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
              Configures the close guard for the ActiveViewModel.
            </summary>
            <param name="guard"> The close guard. </param>
            <remarks>
              if no guard is configured, <see cref="M:Caliburn.Micro.IGuardClose.CanClose(System.Action{System.Boolean})"/> is automatically being called.
            </remarks>
        </member>
        <member name="M:Cocktail.INavigatorConfigurator.WithTargetGuard(System.Func{System.Type,System.String,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
              Configures the guard for the target type.
            </summary>
            <param name="guard"> The target guard. </param>
            <remarks>
              The target guard controls whether the target type is an authorized navigation target.
            </remarks>
        </member>
        <member name="T:Cocktail.INavigator">
            <summary>
              A service that performs UI navigation logic.
            </summary>
        </member>
        <member name="M:Cocktail.INavigator.NavigateToAsync(System.Type,System.Func{System.Object,System.Threading.Tasks.Task})">
            <summary>
              Asynchronously navigates to an instance of the provided ViewModel type. The navigation will be cancelled if 
              the current active ViewModel cannot be closed or the target type is not authorized.
            </summary>
            <param name="viewModelType"> The target ViewModel type. </param>
            <param name="prepare"> An action to initialize the target ViewModel before it is activated. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task"/> to await completion. </returns>
        </member>
        <member name="M:Cocktail.INavigator.NavigateToAsync(System.Type,System.Action{System.Object})">
            <summary>
              Asynchronously navigates to an instance of the provided ViewModel type. The navigation will be cancelled if 
              the current active ViewModel cannot be closed or the target type is not authorized.
            </summary>
            <param name="viewModelType"> The target ViewModel type. </param>
            <param name="prepare"> An action to initialize the target ViewModel before it is activated. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task"/> to await completion. </returns>
        </member>
        <member name="M:Cocktail.INavigator.NavigateToAsync(System.Type)">
            <summary>
              Asynchronously navigates to an instance of the provided ViewModel type. The navigation will be cancelled if 
              the current active ViewModel cannot be closed or the target type is not authorized.
            </summary>
            <param name="viewModelType"> The target ViewModel type. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task"/> to await completion. </returns>
        </member>
        <member name="M:Cocktail.INavigator.NavigateToAsync``1(System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
              Asynchronously navigates to an instance of the provided ViewModel type. The navigation will be cancelled if 
              the current active ViewModel cannot be closed or the target type is not authorized.
            </summary>
            <param name="prepare"> An action to initialize the target ViewModel before it is activated. </param>
            <typeparam name="T"> The target ViewModel type. </typeparam>
            <returns> A <see cref="T:System.Threading.Tasks.Task"/> to await completion. </returns>
        </member>
        <member name="M:Cocktail.INavigator.NavigateToAsync``1(System.Action{``0})">
            <summary>
              Asynchronously navigates to an instance of the provided ViewModel type. The navigation will be cancelled if 
              the current active ViewModel cannot be closed or the target type is not authorized.
            </summary>
            <param name="prepare"> An action to initialize the target ViewModel before it is activated. </param>
            <typeparam name="T"> The target ViewModel type. </typeparam>
            <returns> A <see cref="T:System.Threading.Tasks.Task"/> to await completion. </returns>
        </member>
        <member name="M:Cocktail.INavigator.NavigateToAsync``1">
            <summary>
              Asynchronously navigates to an instance of the provided ViewModel type. The navigation will be cancelled if 
              the current active ViewModel cannot be closed or the target type is not authorized.
            </summary>
            <typeparam name="T"> The target ViewModel type. </typeparam>
            <returns> A <see cref="T:System.Threading.Tasks.Task"/> to await completion. </returns>
        </member>
        <member name="M:Cocktail.INavigator.NavigateToAsync(System.Type,System.String,System.Func{System.Object,System.Threading.Tasks.Task})">
            <summary>
              Asynchronously navigates to a ViewModel instance that matches the specified name and type. 
              The navigation will be cancelled if the current active ViewModel cannot be closed or the target type is not authorized.
            </summary>
            <param name="viewModelType"> The type to match. </param>
            <param name="contractName"> The name to match. </param>
            <param name="prepare"> An action to initialize the target ViewModel before it is activated. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task"/> to await completion. </returns>
            <remarks>
              Not available in Windows 8 Store apps.
            </remarks>
        </member>
        <member name="M:Cocktail.INavigator.NavigateToAsync(System.Type,System.String,System.Action{System.Object})">
            <summary>
              Asynchronously navigates to a ViewModel instance that matches the specified name and type. 
              The navigation will be cancelled if the current active ViewModel cannot be closed or the target type is not authorized.
            </summary>
            <param name="viewModelType"> The type to match. </param>
            <param name="contractName"> The name to match. </param>
            <param name="prepare"> An action to initialize the target ViewModel before it is activated. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task"/> to await completion. </returns>
            <remarks>
              Not available in Windows 8 Store apps.
            </remarks>
        </member>
        <member name="M:Cocktail.INavigator.NavigateToAsync(System.Type,System.String)">
            <summary>
              Asynchronously navigates to a ViewModel instance that matches the specified name and type. 
              The navigation will be cancelled if the current active ViewModel cannot be closed or the target type is not authorized.
            </summary>
            <param name="viewModelType"> The type to match. </param>
            <param name="contractName"> The name to match. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task"/> to await completion. </returns>
            <remarks>
              Not available in Windows 8 Store apps.
            </remarks>
        </member>
        <member name="P:Cocktail.INavigator.ActiveViewModel">
            <summary>
              Returns the current active ViewModel or null.
            </summary>
        </member>
        <member name="T:Cocktail.Navigator">
            <summary>
              A configurable service that performs UI navigation logic.
            </summary>
        </member>
        <member name="M:Cocktail.Navigator.NavigateToAsync(System.Type,System.Action{System.Object})">
            <summary>
              Asynchronously navigates to an instance of the provided ViewModel type. The navigation will be cancelled if 
              the current active ViewModel cannot be closed or the target type is not authorized.
            </summary>
            <param name="viewModelType"> The target ViewModel type. </param>
            <param name="prepare"> An action to initialize the target ViewModel before it is activated. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task"/> to await completion. </returns>
        </member>
        <member name="M:Cocktail.Navigator.NavigateToAsync(System.Type)">
            <summary>
              Asynchronously navigates to an instance of the provided ViewModel type. The navigation will be cancelled if 
              the current active ViewModel cannot be closed or the target type is not authorized.
            </summary>
            <param name="viewModelType"> The target ViewModel type. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task"/> to await completion. </returns>
        </member>
        <member name="M:Cocktail.Navigator.NavigateToAsync``1(System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
              Asynchronously navigates to an instance of the provided ViewModel type. The navigation will be cancelled if 
              the current active ViewModel cannot be closed or the target type is not authorized.
            </summary>
            <param name="prepare"> An action to initialize the target ViewModel before it is activated. </param>
            <typeparam name="T"> The target ViewModel type. </typeparam>
            <returns> A <see cref="T:System.Threading.Tasks.Task"/> to await completion. </returns>
        </member>
        <member name="M:Cocktail.Navigator.NavigateToAsync``1(System.Action{``0})">
            <summary>
              Asynchronously navigates to an instance of the provided ViewModel type. The navigation will be cancelled if 
              the current active ViewModel cannot be closed or the target type is not authorized.
            </summary>
            <param name="prepare"> An action to initialize the target ViewModel before it is activated. </param>
            <typeparam name="T"> The target ViewModel type. </typeparam>
            <returns> A <see cref="T:System.Threading.Tasks.Task"/> to await completion. </returns>
        </member>
        <member name="M:Cocktail.Navigator.NavigateToAsync``1">
            <summary>
              Asynchronously navigates to an instance of the provided ViewModel type. The navigation will be cancelled if 
              the current active ViewModel cannot be closed or the target type is not authorized.
            </summary>
            <typeparam name="T"> The target ViewModel type. </typeparam>
            <returns> A <see cref="T:System.Threading.Tasks.Task"/> to await completion. </returns>
        </member>
        <member name="M:Cocktail.Navigator.TryInjectParameter(System.Object,System.Object,System.String)">
            <summary>
            A static helper that can be used as prepare action in order to inject a parameter into the target view model
            </summary>
            <param name="target">The target view model</param>
            <param name="parameter">The parameter value to be injected.</param>
            <param name="propertyName">The name of the property to inject to.</param>
        </member>
        <member name="M:Cocktail.Navigator.Configure(System.Action{Cocktail.INavigatorConfigurator})">
            <summary>
              Configures the current NavigationService.
            </summary>
            <param name="configure"> A delegate action to perform the configuration. </param>
        </member>
        <member name="M:Cocktail.Navigator.CanCloseAsync">
            <summary>
              Determines if the active ViewModel can be closed.
            </summary>
            <returns> Returns true if the active ViewModel can be closed. </returns>
        </member>
        <member name="M:Cocktail.Navigator.#ctor(Caliburn.Micro.IConductActiveItem)">
            <summary>
              Initializes a new NavigationService.
            </summary>
            <param name="conductor"> The underlying screen conductor used to activate navigation targets. </param>
        </member>
        <member name="M:Cocktail.Navigator.NavigateToAsync(System.Type,System.String,System.Func{System.Object,System.Threading.Tasks.Task})">
            <summary>
              Asynchronously navigates to a ViewModel instance that matches the specified name and type. 
              The navigation will be cancelled if the current active ViewModel cannot be closed or the target type is not authorized.
            </summary>
            <param name="viewModelType"> The type to match. </param>
            <param name="contractName"> The name to match. </param>
            <param name="prepare"> An action to initialize the target ViewModel before it is activated. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task"/> to await completion. </returns>
            <remarks>
              Not available in Windows 8 Store apps.
            </remarks>
        </member>
        <member name="M:Cocktail.Navigator.NavigateToAsync(System.Type,System.Func{System.Object,System.Threading.Tasks.Task})">
            <summary>
              Asynchronously navigates to an instance of the provided ViewModel type. The navigation will be cancelled if 
              the current active ViewModel cannot be closed or the target type is not authorized.
            </summary>
            <param name="viewModelType"> The target ViewModel type. </param>
            <param name="prepare"> An action to initialize the target ViewModel before it is activated. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task"/> to await completion. </returns>
        </member>
        <member name="M:Cocktail.Navigator.NavigateToAsync(System.Type,System.String)">
            <summary>
              Asynchronously navigates to a ViewModel instance that matches the specified name and type. 
              The navigation will be cancelled if the current active ViewModel cannot be closed or the target type is not authorized.
            </summary>
            <param name="viewModelType"> The type to match. </param>
            <param name="contractName"> The name to match. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task"/> to await completion. </returns>
            <remarks>
              Not available in Windows 8 Store apps.
            </remarks>
        </member>
        <member name="M:Cocktail.Navigator.NavigateToAsync(System.Type,System.String,System.Action{System.Object})">
            <summary>
              Asynchronously navigates to a ViewModel instance that matches the specified name and type. 
              The navigation will be cancelled if the current active ViewModel cannot be closed or the target type is not authorized.
            </summary>
            <param name="viewModelType"> The type to match. </param>
            <param name="contractName"> The name to match. </param>
            <param name="prepare"> An action to initialize the target ViewModel before it is activated. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task"/> to await completion. </returns>
            <remarks>
              Not available in Windows 8 Store apps.
            </remarks>
        </member>
        <member name="M:Cocktail.Navigator.AuthorizeTargetAsync(System.Type,System.String)">
            <summary>
              Determines if the target ViewModel type is authorized.
            </summary>
            <param name="viewModelType"> The target ViewModel type. </param>
            <param name="contractName">The target ViewModel contract name.</param>
            <returns> Return true if the target type is authorized. </returns>
        </member>
        <member name="P:Cocktail.Navigator.ActiveViewModel">
            <summary>
              Returns the current active ViewModel or null.
            </summary>
        </member>
        <member name="T:Cocktail.ObjectManager`2">
            <summary>The ObjectManager allows for the creation and sharing of multiple object instances at runtime. It utilizes weak references to automatically free
            instances that are no longer used anywhere in the application. It automatically creates new instances for keys that are being encountered for the first time or
            after a previous instance with the same key has been released.</summary>
            <typeparam name="TKey">The type of the key used to retrieve a shared instance.</typeparam>
            <typeparam name="T">The type of the instance.</typeparam>
        </member>
        <member name="M:Cocktail.ObjectManager`2.#ctor">
            <summary>Initializes a new ObjectManager</summary>
        </member>
        <member name="M:Cocktail.ObjectManager`2.GetObject(`0)">
            <summary>
            Retrieves an object instance by key. If the key hasn't been encountered before, a new instance will be created.
            </summary>
            <param name="key">The key used to look up the instance. If the key is encountered for the first time, a new instance will be created.</param>
            <returns>An existing or new instance matching the key.</returns>
        </member>
        <member name="M:Cocktail.ObjectManager`2.TryGetObject(`0)">
            <summary>
            Retrieves an object instance by key without creating a new instance if it doesn't exist.
            </summary>
            <param name="key">The key used to look up the instance.</param>
            <returns>Null if no object for the given key exists.</returns>
        </member>
        <member name="M:Cocktail.ObjectManager`2.Create">
            <summary>Creates an object instance without adding it to the internal managed dictionary.</summary>
            <returns>Returns the new instance. Can later be added with <see cref="M:Cocktail.ObjectManager`2.Add(`0,`1)"/></returns>
        </member>
        <member name="M:Cocktail.ObjectManager`2.Clear">
            <summary>Removes all instances and keys from the manager.</summary>
        </member>
        <member name="M:Cocktail.ObjectManager`2.Add(`0,`1)">
            <summary>Allows to manually add an object instance to the ObjectManager.</summary>
            <param name="key">The key under which the instance should be filed away.</param>
            <param name="obj">The object instance to be added.</param>
        </member>
        <member name="M:Cocktail.ObjectManager`2.Remove(`0)">
            <summary>Allows to manually remove an object instance from the manager. A subsequent call to GetObject with the same key will create a new instance.</summary>
            <param name="key">The key of the object instance to be removed.</param>
        </member>
        <member name="M:Cocktail.ObjectManager`2.Exists(`0)">
            <summary>Check if an instance with the given key exists.</summary>
            <param name="key">The key of the instance.</param>
            <returns>Returns true if the instance with the key exists.</returns>
        </member>
        <member name="M:Cocktail.Pager`1.FirstPageAsync">
            <summary>
              Moves to the first page.
            </summary>
            <returns> The first page. </returns>
            <exception cref="T:System.InvalidOperationException">A page change is in progress.</exception>
        </member>
        <member name="M:Cocktail.Pager`1.FirstPageAsync(System.Threading.CancellationToken)">
            <summary>
              Moves to the first page.
            </summary>
            <param name="cancellationToken">A token that allows for the operation to be cancelled.</param>
            <returns> The first page. </returns>
            <exception cref="T:System.InvalidOperationException">A page change is in progress.</exception>
        </member>
        <member name="M:Cocktail.Pager`1.LastPageAsync">
            <summary>
              Moves to the last page.
            </summary>
            <returns> The last page. </returns>
            <exception cref="T:System.InvalidOperationException">A page change is in progress.</exception>
        </member>
        <member name="M:Cocktail.Pager`1.LastPageAsync(System.Threading.CancellationToken)">
            <summary>
              Moves to the last page.
            </summary>
            <param name="cancellationToken">A token that allows for the operation to be cancelled.</param>
            <returns> The last page. </returns>
            <exception cref="T:System.InvalidOperationException">A page change is in progress.</exception>
        </member>
        <member name="M:Cocktail.Pager`1.NextPageAsync">
            <summary>
              Moves to the page after the current page.
            </summary>
            <returns> The next page. </returns>
            <exception cref="T:System.InvalidOperationException">A page change is in progress.</exception>
        </member>
        <member name="M:Cocktail.Pager`1.NextPageAsync(System.Threading.CancellationToken)">
            <summary>
              Moves to the page after the current page.
            </summary>
            <param name="cancellationToken">A token that allows for the operation to be cancelled.</param>
            <returns> The next page. </returns>
            <exception cref="T:System.InvalidOperationException">A page change is in progress.</exception>
        </member>
        <member name="M:Cocktail.Pager`1.PreviousPageAsync">
            <summary>
              Moves to the page before the current page.
            </summary>
            <returns> The previous page. </returns>
            <exception cref="T:System.InvalidOperationException">A page change is in progress.</exception>
        </member>
        <member name="M:Cocktail.Pager`1.PreviousPageAsync(System.Threading.CancellationToken)">
            <summary>
              Moves to the page before the current page.
            </summary>
            <param name="cancellationToken">A token that allows for the operation to be cancelled.</param>
            <returns> The previous page. </returns>
            <exception cref="T:System.InvalidOperationException">A page change is in progress.</exception>
        </member>
        <member name="M:Cocktail.Pager`1.GoToPageAsync(System.Int32)">
            <summary>
              Moves to the specified page.
            </summary>
            <param name="pageIndex"> The zero-based index of the requested page. </param>
            <returns> The requested page. </returns>
            <exception cref="T:System.InvalidOperationException">A page change is in progress.</exception>
        </member>
        <member name="M:Cocktail.Pager`1.GoToPageAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
              Moves to the specified page.
            </summary>
            <param name="pageIndex"> The zero-based index of the requested page. </param>
            <param name="cancellationToken">A token that allows for the operation to be cancelled.</param>
            <returns> The requested page. </returns>
            <exception cref="T:System.InvalidOperationException">A page change is in progress.</exception>
        </member>
        <member name="P:Cocktail.Pager`1.PageSize">
            <summary>
              Returns the number of records requested for each page.
            </summary>
        </member>
        <member name="P:Cocktail.Pager`1.IsPageChanging">
            <summary>
            Returns true if a page change is in progress.
            </summary>
        </member>
        <member name="P:Cocktail.Pager`1.TotalDataSourceItemCount">
            <summary>
              Returns the number of records available to be returned from the back-end data source.
            </summary>
            <remarks>
              This property will return -1 until the last page is fetched via a call to LastPageAsync() /> .
            </remarks>
        </member>
        <member name="P:Cocktail.Pager`1.TotalItemCount">
            <summary>
              Returns the total number of items returned.
            </summary>
            <remarks>
              This property will return -1 until all pages are fetched or the <see cref="P:Cocktail.IPager`1.TotalDataSourceItemCount"/> is known. The number will be an approximation when a large number of inserts and deletes have occurred.
            </remarks>
        </member>
        <member name="P:Cocktail.Pager`1.TotalNumberOfPages">
            <summary>
            Returns the total number of pages.
            </summary>
            <remarks>
              This property will return -1 until all pages are fetched or the <see cref="P:Cocktail.IPager`1.TotalDataSourceItemCount"/> is known. The number will be an approximation when a large number of inserts and deletes have occurred.
            </remarks>
        </member>
        <member name="P:Cocktail.Pager`1.CurrentPage">
            <summary>
            Returns the current page.
            </summary>
        </member>
        <member name="T:Cocktail.PagerRepository`1">
            <summary>
                A generic implementation of a repository which allows paging of entity and object results.
            </summary>
            <typeparam name="T"> The type of entity this repository retrieves. </typeparam>
        </member>
        <member name="T:Cocktail.Repository`1">
            <summary>
                A generic implementation of a repository.
            </summary>
            <typeparam name="T"> The type of entity this repository retrieves. </typeparam>
        </member>
        <member name="M:Cocktail.Repository`1.#ctor(Cocktail.IEntityManagerProvider,IdeaBlade.EntityModel.QueryStrategy)">
            <summary>
                Creates a new repository.
            </summary>
            <param name="entityManagerProvider"> The EntityMangerProvider to be used to obtain an EntityManager. </param>
            <param name="defaultQueryStrategy"> The optional default query strategy. </param>
        </member>
        <member name="M:Cocktail.Repository`1.WithIdAsync(System.Object)">
            <summary>
                Retrieves the entity matching the provided key with the repository's default query strategy.
            </summary>
            <param name="keyValue"> The single primary key value. </param>
            <returns> The retrieved entity. </returns>
            <exception cref="T:Cocktail.EntityNotFoundException">A single entity matching the provided key was not found.</exception>
        </member>
        <member name="M:Cocktail.Repository`1.WithIdAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
                Retrieves the entity matching the provided key with the repository's default query strategy.
            </summary>
            <param name="keyValue"> The single primary key value. </param>
            <param name="cancellationToken"> A token that allows for the operation to be cancelled. </param>
            <returns> The retrieved entity. </returns>
            <exception cref="T:Cocktail.EntityNotFoundException">A single entity matching the provided key was not found.</exception>
        </member>
        <member name="M:Cocktail.Repository`1.WithIdFromDataSourceAsync(System.Object)">
            <summary>
                Retrieves the entity matching the provided key from the back-end data source.
            </summary>
            <param name="keyValue"> The single primary key value. </param>
            <returns> The retrieved entity. </returns>
            <exception cref="T:Cocktail.EntityNotFoundException">A single entity matching the provided key was not found.</exception>
        </member>
        <member name="M:Cocktail.Repository`1.WithIdFromDataSourceAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
                Retrieves the entity matching the provided key from the back-end data source.
            </summary>
            <param name="keyValue"> The single primary key value. </param>
            <param name="cancellationToken"> A token that allows for the operation to be cancelled. </param>
            <returns> The retrieved entity. </returns>
            <exception cref="T:Cocktail.EntityNotFoundException">A single entity matching the provided key was not found.</exception>
        </member>
        <member name="M:Cocktail.Repository`1.WithIdAsync(System.Object[])">
            <summary>
                Retrieves the entity matching the provided key with the repository's default query strategy.
            </summary>
            <param name="keyValues"> The composite primary key values. </param>
            <returns> The retrieved entity. </returns>
            <exception cref="T:Cocktail.EntityNotFoundException">A single entity matching the provided key was not found.</exception>
        </member>
        <member name="M:Cocktail.Repository`1.WithIdAsync(System.Object[],System.Threading.CancellationToken)">
            <summary>
                Retrieves the entity matching the provided key with the repository's default query strategy.
            </summary>
            <param name="keyValues"> The composite primary key values. </param>
            <param name="cancellationToken"> A token that allows for the operation to be cancelled. </param>
            <returns> The retrieved entity. </returns>
            <exception cref="T:Cocktail.EntityNotFoundException">A single entity matching the provided key was not found.</exception>
        </member>
        <member name="M:Cocktail.Repository`1.WithIdFromDataSourceAsync(System.Object[])">
            <summary>
                Retrieves the entity matching the provided key from the back-end data source.
            </summary>
            <param name="keyValues"> The composite primary key values. </param>
            <returns> The retrieved entity. </returns>
            <exception cref="T:Cocktail.EntityNotFoundException">A single entity matching the provided key was not found.</exception>
        </member>
        <member name="M:Cocktail.Repository`1.WithIdFromDataSourceAsync(System.Object[],System.Threading.CancellationToken)">
            <summary>
                Retrieves the entity matching the provided key from the back-end data source.
            </summary>
            <param name="keyValues"> The composite primary key values. </param>
            <param name="cancellationToken"> A token that allows for the operation to be cancelled. </param>
            <returns> The retrieved entity. </returns>
            <exception cref="T:Cocktail.EntityNotFoundException">A single entity matching the provided key was not found.</exception>
        </member>
        <member name="M:Cocktail.Repository`1.WithIdFromCache(System.Object[])">
            <summary>
                Retrieves the entity matching the provided key from the entity cache.
            </summary>
            <param name="keyValues"> The composite primary key values. </param>
            <returns> The retrieved entity. </returns>
            <exception cref="T:Cocktail.EntityNotFoundException">A single entity matching the provided key was not found.</exception>
        </member>
        <member name="M:Cocktail.Repository`1.AllAsync(System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Action{Cocktail.IFetchOptions{`0}})">
            <summary>
                Retrieves all entities with the repository's default query strategy.
            </summary>
            <param name="orderBy"> Optional sorting function to sort the returned list of entities. </param>
            <param name="fetchOptions">Optional delegate to specify additional fetching options.</param>
            <returns> The list of retrieved entities. </returns>
        </member>
        <member name="M:Cocktail.Repository`1.AllAsync(System.Threading.CancellationToken,System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Action{Cocktail.IFetchOptions{`0}})">
            <summary>
                Retrieves all entities with the repository's default query strategy.
            </summary>
            <param name="cancellationToken"> A token that allows for the operation to be cancelled. </param>
            <param name="orderBy"> Optional sorting function to sort the returned list of entities. </param>
            <param name="fetchOptions">Optional delegate to specify additional fetching options.</param>
            <returns> The list of retrieved entities. </returns>
        </member>
        <member name="M:Cocktail.Repository`1.AllInDataSourceAsync(System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Action{Cocktail.IFetchOptions{`0}})">
            <summary>
                Retrieves all entities from the back-end data source.
            </summary>
            <param name="orderBy"> Optional sorting function to sort the returned list of entities. </param>
            <param name="fetchOptions">Optional delegate to specify additional fetching options.</param>
            <returns> The list of retrieved entities. </returns>
        </member>
        <member name="M:Cocktail.Repository`1.AllInDataSourceAsync(System.Threading.CancellationToken,System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Action{Cocktail.IFetchOptions{`0}})">
            <summary>
                Retrieves all entities from the back-end data source.
            </summary>
            <param name="cancellationToken"> A token that allows for the operation to be cancelled. </param>
            <param name="orderBy"> Optional sorting function to sort the returned list of entities. </param>
            <param name="fetchOptions">Optional delegate to specify additional fetching options.</param>
            <returns> The list of retrieved entities. </returns>
        </member>
        <member name="M:Cocktail.Repository`1.AllInCache(System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Action{Cocktail.IFetchOptions{`0}})">
            <summary>
                Retrieves all entities from the cache.
            </summary>
            <param name="orderBy"> Optional sorting function to sort the returned list of entities. </param>
            <param name="fetchOptions">Optional delegate to specify additional fetching options.</param>
            <returns> The list of retrieved entities. </returns>
        </member>
        <member name="M:Cocktail.Repository`1.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
                Returns the number of entities.
            </summary>
            <param name="predicate"> Optional predicate to filter the entities </param>
            <returns> The number of entities matching the optional expression. </returns>
        </member>
        <member name="M:Cocktail.Repository`1.CountInCache(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
                Returns the number of entities in the cache.
            </summary>
            <param name="predicate"> Optional predicate to filter the entities </param>
            <returns> The number of entities matching the optional expression. </returns>
        </member>
        <member name="M:Cocktail.Repository`1.FindAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Action{Cocktail.IFetchOptions{`0}})">
            <summary>
                Retrieves one or more entities matching the provided expression with the repository's default query strategy.
            </summary>
            <param name="predicate"> Optional predicate to filter the returned list of entities </param>
            <param name="orderBy"> Optional sorting function to sort the returned list of entities. </param>
            <param name="fetchOptions">Optional delegate to specify additional fetching options.</param>
            <returns> The list of retrieved entities. </returns>
        </member>
        <member name="M:Cocktail.Repository`1.FindAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken,System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Action{Cocktail.IFetchOptions{`0}})">
            <summary>
                Retrieves one or more entities matching the provided expression with the repository's default query strategy.
            </summary>
            <param name="predicate"> Optional predicate to filter the returned list of entities </param>
            <param name="cancellationToken"> A token that allows for the operation to be cancelled. </param>
            <param name="orderBy"> Optional sorting function to sort the returned list of entities. </param>
            <param name="fetchOptions">Optional delegate to specify additional fetching options.</param>
            <returns> The list of retrieved entities. </returns>
        </member>
        <member name="M:Cocktail.Repository`1.FindAsync``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{``0},System.Linq.IOrderedQueryable{``0}},System.Action{Cocktail.IFetchOptions{``0}})">
            <summary>
                Retrieves one or more entities matching the provided expression from the back-end data source and projects the results into a different shape using the selector parameter.
            </summary>
            <param name="selector"> The selector used to shape the result. </param>
            <param name="predicate"> Optional predicate to filter the returned list of objects. </param>
            <param name="orderBy"> Optional sorting function to sort the returned list of objects. </param>
            <param name="fetchOptions">Optional delegate to specify additional fetching options.</param>
            <returns> The list of retrieved objects. </returns>
        </member>
        <member name="M:Cocktail.Repository`1.FindAsync``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Threading.CancellationToken,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{``0},System.Linq.IOrderedQueryable{``0}},System.Action{Cocktail.IFetchOptions{``0}})">
            <summary>
                Retrieves one or more entities matching the provided expression with the repository's default query strategy and projects the results into a different shape using the selector parameter.
            </summary>
            <param name="selector"> The selector used to shape the result. </param>
            <param name="cancellationToken"> A token that allows for the operation to be cancelled. </param>
            <param name="predicate"> Optional predicate to filter the returned list of objects. </param>
            <param name="orderBy"> Optional sorting function to sort the returned list of objects. </param>
            <param name="fetchOptions">Optional delegate to specify additional fetching options.</param>
            <returns> The list of retrieved objects. </returns>
        </member>
        <member name="M:Cocktail.Repository`1.FindAsync(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable,System.Linq.IOrderedQueryable},System.Action{Cocktail.IFetchOptions})">
            <summary>
                Retrieves one or more entities matching the provided expression with the repository's default query strategy and projects the results into a different shape using the selector parameter.
            </summary>
            <param name="selector"> The selector used to shape the result. </param>
            <param name="predicate"> Optional predicate to filter the returned list of objects. </param>
            <param name="orderBy"> Optional sorting function to sort the returned list of objects. </param>
            <param name="fetchOptions">Optional delegate to specify additional fetching options.</param>
            <returns> The list of retrieved objects. </returns>
        </member>
        <member name="M:Cocktail.Repository`1.FindAsync(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable},System.Threading.CancellationToken,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable,System.Linq.IOrderedQueryable},System.Action{Cocktail.IFetchOptions})">
            <summary>
                Retrieves one or more entities matching the provided expression with the repository's default query strategy and projects the results into a different shape using the selector parameter.
            </summary>
            <param name="selector"> The selector used to shape the result. </param>
            <param name="cancellationToken"> A token that allows for the operation to be cancelled. </param>
            <param name="predicate"> Optional predicate to filter the returned list of objects. </param>
            <param name="orderBy"> Optional sorting function to sort the returned list of objects. </param>
            <param name="fetchOptions">Optional delegate to specify additional fetching options.</param>
            <returns> The list of retrieved objects. </returns>
        </member>
        <member name="M:Cocktail.Repository`1.FindInDataSourceAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Action{Cocktail.IFetchOptions{`0}})">
            <summary>
                Retrieves one or more entities matching the provided expression from the back-end data source.
            </summary>
            <param name="predicate"> Optional predicate to filter the returned list of entities </param>
            <param name="orderBy"> Optional sorting function to sort the returned list of entities. </param>
            <param name="fetchOptions">Optional delegate to specify additional fetching options.</param>
            <returns> The list of retrieved entities. </returns>
        </member>
        <member name="M:Cocktail.Repository`1.FindInDataSourceAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken,System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Action{Cocktail.IFetchOptions{`0}})">
            <summary>
                Retrieves one or more entities matching the provided expression from the back-end data source.
            </summary>
            <param name="predicate"> Optional predicate to filter the returned list of entities </param>
            <param name="cancellationToken"> A token that allows for the operation to be cancelled. </param>
            <param name="orderBy"> Optional sorting function to sort the returned list of entities. </param>
            <param name="fetchOptions">Optional delegate to specify additional fetching options.</param>
            <returns> The list of retrieved entities. </returns>
        </member>
        <member name="M:Cocktail.Repository`1.FindInDataSourceAsync``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{``0},System.Linq.IOrderedQueryable{``0}},System.Action{Cocktail.IFetchOptions{``0}})">
            <summary>
                Retrieves one or more entities matching the provided expression from the back-end data source and projects the results into a different shape using the selector parameter.
            </summary>
            <param name="selector"> The selector used to shape the result. </param>
            <param name="predicate"> Optional predicate to filter the returned list of objects. </param>
            <param name="orderBy"> Optional sorting function to sort the returned list of objects. </param>
            <param name="fetchOptions">Optional delegate to specify additional fetching options.</param>
            <returns> The list of retrieved objects. </returns>
        </member>
        <member name="M:Cocktail.Repository`1.FindInDataSourceAsync``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Threading.CancellationToken,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{``0},System.Linq.IOrderedQueryable{``0}},System.Action{Cocktail.IFetchOptions{``0}})">
            <summary>
                Retrieves one or more entities matching the provided expression from the back-end data source and projects the results into a different shape using the selector parameter.
            </summary>
            <param name="selector"> The selector used to shape the result. </param>
            <param name="cancellationToken"> A token that allows for the operation to be cancelled. </param>
            <param name="predicate"> Optional predicate to filter the returned list of objects. </param>
            <param name="orderBy"> Optional sorting function to sort the returned list of objects. </param>
            <param name="fetchOptions">Optional delegate to specify additional fetching options.</param>
            <returns> The list of retrieved objects. </returns>
        </member>
        <member name="M:Cocktail.Repository`1.FindInDataSourceAsync(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable,System.Linq.IOrderedQueryable},System.Action{Cocktail.IFetchOptions})">
            <summary>
                Retrieves one or more entities matching the provided expression from the back-end data source and projects the results into a different shape using the selector parameter.
            </summary>
            <param name="selector"> The selector used to shape the result. </param>
            <param name="predicate"> Optional predicate to filter the returned list of objects. </param>
            <param name="orderBy"> Optional sorting function to sort the returned list of objects. </param>
            <param name="fetchOptions">Optional delegate to specify additional fetching options.</param>
            <returns> The list of retrieved objects. </returns>
        </member>
        <member name="M:Cocktail.Repository`1.FindInDataSourceAsync(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable},System.Threading.CancellationToken,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable,System.Linq.IOrderedQueryable},System.Action{Cocktail.IFetchOptions})">
            <summary>
                Retrieves one or more entities matching the provided expression from the back-end data source and projects the results into a different shape using the selector parameter.
            </summary>
            <param name="selector"> The selector used to shape the result. </param>
            <param name="cancellationToken"> A token that allows for the operation to be cancelled. </param>
            <param name="predicate"> Optional predicate to filter the returned list of objects. </param>
            <param name="orderBy"> Optional sorting function to sort the returned list of objects. </param>
            <param name="fetchOptions">Optional delegate to specify additional fetching options.</param>
            <returns> The list of retrieved objects. </returns>
        </member>
        <member name="M:Cocktail.Repository`1.FindInCache(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Action{Cocktail.IFetchOptions{`0}})">
            <summary>
                Retrieves one or more entities matching the provided expression from the cache.
            </summary>
            <param name="predicate"> Optional predicate to filter the returned list of entities </param>
            <param name="orderBy"> Optional sorting function to sort the returned list of entities. </param>
            <param name="fetchOptions">Optional delegate to specify additional fetching options.</param>
            <returns> The list of retrieved entities. </returns>
        </member>
        <member name="M:Cocktail.Repository`1.FindInCache``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{``0},System.Linq.IOrderedQueryable{``0}},System.Action{Cocktail.IFetchOptions{``0}})">
            <summary>
                Retrieves one or more entities matching the provided expression from the cache and projects the results into a different shape using the selector parameter.
            </summary>
            <param name="selector"> The selector used to shape the result. </param>
            <param name="predicate"> Optional predicate to filter the returned list of objects. </param>
            <param name="orderBy"> Optional sorting function to sort the returned list of objects. </param>
            <param name="fetchOptions">Optional delegate to specify additional fetching options.</param>
            <returns> The list of retrieved objects. </returns>
        </member>
        <member name="M:Cocktail.Repository`1.FindInCache(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable,System.Linq.IOrderedQueryable},System.Action{Cocktail.IFetchOptions})">
            <summary>
                Retrieves one or more entities matching the provided expression from the cache and projects the results into a different shape using the selector parameter.
            </summary>
            <param name="selector"> The selector used to shape the result. </param>
            <param name="predicate"> Optional predicate to filter the returned list of objects. </param>
            <param name="orderBy"> Optional sorting function to sort the returned list of objects. </param>
            <param name="fetchOptions">Optional delegate to specify additional fetching options.</param>
            <returns> The list of retrieved objects. </returns>
        </member>
        <member name="M:Cocktail.Repository`1.Delete(`0)">
            <summary>
                Marks the specified entity as to be deleted.
            </summary>
            <param name="entity"> Entity to be deleted. </param>
        </member>
        <member name="M:Cocktail.Repository`1.Delete(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Marks the specified entities as to be deleted.
            </summary>
            <param name="entities"> Entities to be deleted. </param>
        </member>
        <member name="M:Cocktail.Repository`1.ExistsInCache(System.Object[])">
            <summary>
                Returns true if the entity matching the provided key is found in the cache.
            </summary>
            <param name="keyValues"> The primary key values </param>
        </member>
        <member name="M:Cocktail.Repository`1.GetKeyQuery(System.Object[])">
            <summary>
                Returns the query to retrieve a single entity,
            </summary>
            <param name="keyValues"> One ore more primary key values. </param>
            <remarks>
                Override to modify the query used to retrieve a single entity
            </remarks>
        </member>
        <member name="M:Cocktail.Repository`1.GetFindQuery(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Action{Cocktail.IFetchOptions{`0}})">
            <summary>
                Returns the query to retrieve a list of entities.
            </summary>
            <param name="predicate"> The predicate expression used to qualify the list of entities. </param>
            <param name="orderBy"> Sorting function to sort the returned list of entities. </param>
            <param name="fetchOptions">Delegate to specify additional fetching options.</param>
            <remarks>
                Override to modify the query used to retrieve a list of entities
            </remarks>
        </member>
        <member name="M:Cocktail.Repository`1.GetFindQuery``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{``0},System.Linq.IOrderedQueryable{``0}},System.Action{Cocktail.IFetchOptions{``0}})">
            <summary>
                Returns the strongly typed query to retrieve a list of projected entities.
            </summary>
            <param name="selector"> The selector used to project the entities. </param>
            <param name="predicate"> The predicate expression used to qualify the list of objects. </param>
            <param name="orderBy"> Sorting function to sort the returned list of objects. </param>
            <param name="fetchOptions">Delegate to specify additional fetching options.</param>
            <remarks>
                Override to modify the query used to retrieve a list of objects.
            </remarks>
        </member>
        <member name="M:Cocktail.Repository`1.GetFindQuery(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable,System.Linq.IOrderedQueryable},System.Action{Cocktail.IFetchOptions})">
            <summary>
                Returns the query to retrieve a list of projected entities.
            </summary>
            <param name="selector"> The selector used to project the entities. </param>
            <param name="predicate"> The predicate expression used to qualify the list of objects. </param>
            <param name="orderBy"> Sorting function to sort the returned list of objects. </param>
            <param name="fetchOptions">Delegate to specify additional fetching options.</param>
            <remarks>
                Override to modify the query used to retrieve a list of objects.
            </remarks>
        </member>
        <member name="P:Cocktail.Repository`1.DefaultQueryStrategy">
            <summary>
                Gets or sets the repository's default query strategy.
            </summary>
        </member>
        <member name="P:Cocktail.Repository`1.EntityManager">
            <summary>
                Returns the EntityManager used by this repository.
            </summary>
        </member>
        <member name="M:Cocktail.PagerRepository`1.#ctor(Cocktail.IEntityManagerProvider,IdeaBlade.EntityModel.QueryStrategy)">
            <summary>
                Creates a new repository.
            </summary>
            <param name="entityManagerProvider"> The EntityMangerProvider to be used to obtain an EntityManager. </param>
            <param name="defaultQueryStrategy"> The optional default query strategy. </param>
        </member>
        <member name="M:Cocktail.PagerRepository`1.Pager(IdeaBlade.Core.ISortSelector,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Action{Cocktail.IFetchOptions{`0}})">
            <summary>
                Returns a pager which allows entities to be paged.
            </summary>
            <param name="sortSelector"> Required sorting criteria. </param>
            <param name="pageSize"> The desired page size. </param>
            <param name="predicate"> Optional predicate to filter the paged entities. </param>
            <param name="fetchOptions"></param>
            <returns>
                <see cref="T:Cocktail.IPager`1"/> which allows the entities to be paged.
            </returns>
        </member>
        <member name="M:Cocktail.PagerRepository`1.Pager``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Int32,IdeaBlade.Core.ISortSelector,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Action{Cocktail.IFetchOptions{``0}})">
            <summary>
                Returns a pager which allows shaped entities to be paged.
            </summary>
            <param name="selector"> The selector used to shape the entities. </param>
            <param name="pageSize"> The desired page size. </param>
            <param name="sortSelector"> Required sorting criteria. </param>
            <param name="predicate"> Optional predicate to filter the paged entities. </param>
            <param name="fetchOptions"></param>
            <typeparam name="TResult"> The shape of the result. </typeparam>
            <returns>
                <see cref="T:Cocktail.IPager`1"/> which allows the shaped entities to be paged.
            </returns>
        </member>
        <member name="T:Cocktail.PathToImageSourceConverter">
            <summary>Converts a string source path to an image source.</summary>
        </member>
        <member name="M:Cocktail.PathToImageSourceConverter.RegisterConvention">
            <summary>
            Register this instance with <see cref="T:Cocktail.ValueConverterConventionRegistry"/>
            </summary>
        </member>
        <member name="M:Cocktail.PathToImageSourceConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>Convert a string filepath to an <see cref="T:System.Windows.Media.ImageSource"/>.</summary>
        </member>
        <member name="M:Cocktail.PathToImageSourceConverter.GetImageFromPath(System.String)">
            <summary>
            Convert an unfiltered string filepath to an <see cref="T:System.Windows.Media.Imaging.BitmapImage"/>.
            </summary>
            <remarks>
            Gets the <see cref="T:System.Windows.Media.ImageSource"/> from the raw <cref param="filePath"/>
            without using the <see cref="P:Cocktail.PathToImageSourceConverter.PathFilter"/>.
            </remarks>
        </member>
        <member name="F:Cocktail.PathToImageSourceConverter.DefaultPathFilter">
            <summary>
            Default <see cref="P:Cocktail.PathToImageSourceConverter.PathFilter"/> function; 
            </summary>
        </member>
        <member name="M:Cocktail.PathToImageSourceConverter.System#Windows#Data#IValueConverter#ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>Conversion from image to filepath is not implemented.</summary>
        </member>
        <member name="P:Cocktail.PathToImageSourceConverter.PathFilter">
            <summary>
            Filter or otherwise transform the incoming image filepath into an application-appropriate URI string.
            </summary>
            <returns>The morphed string or null if there is no image.</returns>
            <remarks>
            Replace with your own version if you need to manipulate the nominal filepath as you might if
            the filepath is an image name and you will prefix it with a base path.
            </remarks>
            <example>
            PathToImageSourceConverter.PathFilter = path => "/MyApp;component/assets/" + path.Trim();
            </example>
        </member>
        <member name="P:Cocktail.PathToImageSourceConverter.MissingImage">
            <summary>
            Convert to this missing image if there is no image filepath string or can't find the requested image.
            </summary>
        </member>
        <member name="P:Cocktail.PathToImageSourceConverter.DefaultMissingImage">
            <summary>
            Default <see cref="P:Cocktail.PathToImageSourceConverter.MissingImage"/> value;
            </summary>
        </member>
        <member name="T:Cocktail.ObsoleteRepositoryMethods">
            <summary>
            Obsolete repository method signatures. Will be removed in a future version.
            </summary>
        </member>
        <member name="M:Cocktail.ObsoleteRepositoryMethods.AllAsync``1(Cocktail.IRepository{``0},System.Func{System.Linq.IQueryable{``0},System.Linq.IOrderedQueryable{``0}},System.String)">
            <summary>
                Retrieves all entities with the repository's default query strategy.
            </summary>
            <param name="this">The current repository</param>
            <param name="orderBy"> Optional sorting function to sort the returned list of entities. </param>
            <param name="includeProperties"> Optional related entities to eager fetch together with the returned list of entities. Use comma to separate multiple properties. </param>
            <returns> The list of retrieved entities. </returns>
        </member>
        <member name="M:Cocktail.ObsoleteRepositoryMethods.AllAsync``1(Cocktail.IRepository{``0},System.Threading.CancellationToken,System.Func{System.Linq.IQueryable{``0},System.Linq.IOrderedQueryable{``0}},System.String)">
            <summary>
                Retrieves all entities with the repository's default query strategy.
            </summary>
            <param name="this">The current repository</param>
            <param name="cancellationToken"> A token that allows for the operation to be cancelled. </param>
            <param name="orderBy"> Optional sorting function to sort the returned list of entities. </param>
            <param name="includeProperties"> Optional related entities to eager fetch together with the returned list of entities. Use comma to separate multiple properties. </param>
            <returns> The list of retrieved entities. </returns>
        </member>
        <member name="M:Cocktail.ObsoleteRepositoryMethods.AllInDataSourceAsync``1(Cocktail.IRepository{``0},System.Func{System.Linq.IQueryable{``0},System.Linq.IOrderedQueryable{``0}},System.String)">
            <summary>
                Retrieves all entities from the back-end data source.
            </summary>
            <param name="this">The current repository</param>
            <param name="orderBy"> Optional sorting function to sort the returned list of entities. </param>
            <param name="includeProperties"> Optional related entities to eager fetch together with the returned list of entities. Use comma to separate multiple properties. </param>
            <returns> The list of retrieved entities. </returns>
        </member>
        <member name="M:Cocktail.ObsoleteRepositoryMethods.AllInDataSourceAsync``1(Cocktail.IRepository{``0},System.Threading.CancellationToken,System.Func{System.Linq.IQueryable{``0},System.Linq.IOrderedQueryable{``0}},System.String)">
            <summary>
                Retrieves all entities from the back-end data source.
            </summary>
            <param name="this">The current repository</param>
            <param name="cancellationToken"> A token that allows for the operation to be cancelled. </param>
            <param name="orderBy"> Optional sorting function to sort the returned list of entities. </param>
            <param name="includeProperties"> Optional related entities to eager fetch together with the returned list of entities. Use comma to separate multiple properties. </param>
            <returns> The list of retrieved entities. </returns>
        </member>
        <member name="M:Cocktail.ObsoleteRepositoryMethods.FindAsync``1(Cocktail.IRepository{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{System.Linq.IQueryable{``0},System.Linq.IOrderedQueryable{``0}},System.String)">
            <summary>
                Retrieves one or more entities matching the provided expression with the repository's default query strategy.
            </summary>
            <param name="this">The current repository</param>
            <param name="predicate"> Optional predicate to filter the returned list of entities </param>
            <param name="orderBy"> Optional sorting function to sort the returned list of entities. </param>
            <param name="includeProperties"> Optional related entities to eager fetch together with the returned list of entities. Use comma to separate multiple properties. </param>
            <returns> The list of retrieved entities. </returns>
        </member>
        <member name="M:Cocktail.ObsoleteRepositoryMethods.FindAsync``1(Cocktail.IRepository{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken,System.Func{System.Linq.IQueryable{``0},System.Linq.IOrderedQueryable{``0}},System.String)">
            <summary>
                Retrieves one or more entities matching the provided expression with the repository's default query strategy.
            </summary>
            <param name="this">The current repository</param>
            <param name="predicate"> Optional predicate to filter the returned list of entities </param>
            <param name="cancellationToken"> A token that allows for the operation to be cancelled. </param>
            <param name="orderBy"> Optional sorting function to sort the returned list of entities. </param>
            <param name="includeProperties"> Optional related entities to eager fetch together with the returned list of entities. Use comma to separate multiple properties. </param>
            <returns> The list of retrieved entities. </returns>
        </member>
        <member name="M:Cocktail.ObsoleteRepositoryMethods.FindInDataSourceAsync``1(Cocktail.IRepository{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{System.Linq.IQueryable{``0},System.Linq.IOrderedQueryable{``0}},System.String)">
            <summary>
                Retrieves one or more entities matching the provided expression from the back-end data source.
            </summary>
            <param name="this">The current repository</param>
            <param name="predicate"> Optional predicate to filter the returned list of entities </param>
            <param name="orderBy"> Optional sorting function to sort the returned list of entities. </param>
            <param name="includeProperties"> Optional related entities to eager fetch together with the returned list of entities. Use comma to separate multiple properties. </param>
            <returns> The list of retrieved entities. </returns>
        </member>
        <member name="M:Cocktail.ObsoleteRepositoryMethods.FindInDataSourceAsync``1(Cocktail.IRepository{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken,System.Func{System.Linq.IQueryable{``0},System.Linq.IOrderedQueryable{``0}},System.String)">
            <summary>
                Retrieves one or more entities matching the provided expression from the back-end data source.
            </summary>
            <param name="this">The current repository</param>
            <param name="predicate"> Optional predicate to filter the returned list of entities </param>
            <param name="cancellationToken"> A token that allows for the operation to be cancelled. </param>
            <param name="orderBy"> Optional sorting function to sort the returned list of entities. </param>
            <param name="includeProperties"> Optional related entities to eager fetch together with the returned list of entities. Use comma to separate multiple properties. </param>
            <returns> The list of retrieved entities. </returns>
        </member>
        <member name="M:Cocktail.ObsoleteRepositoryMethods.Pager``1(Cocktail.IPagerRepository{``0},IdeaBlade.Core.ISortSelector,System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>
                Returns a pager which allows entities to be paged.
            </summary>
            <param name="this">The current repository</param>
            <param name="sortSelector"> Required sorting criteria. </param>
            <param name="pageSize"> The desired page size. </param>
            <param name="predicate"> Optional predicate to filter the paged entities. </param>
            <param name="includeProperties"> Optional related entities to eager fetch together with the returned list of entities. Use comma to separate multiple properties. </param>
            <returns>
                <see cref="T:Cocktail.IPager`1"/> which allows the entities to be paged.
            </returns>
        </member>
        <member name="T:Cocktail.DialogHostView">
            <summary>
            Internal use.
            </summary>
        </member>
        <member name="M:Cocktail.DialogHostView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Cocktail.HarnessView">
            <summary>
            Internal use.
            </summary>
        </member>
        <member name="M:Cocktail.HarnessView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Cocktail.StringResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.Abort">
            <summary>
              Looks up a localized string similar to Abort.
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.BootstrapperMustNotBeDecoratedWithExports">
            <summary>
              Looks up a localized string similar to Bootstrapper classes or any of its members must not be decorated with the [Export] attribute.
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.Cancel">
            <summary>
              Looks up a localized string similar to Cancel.
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.CannotCancelCurrentOperation">
            <summary>
              Looks up a localized string similar to The current asynchronous operation cannot be cancelled..
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.CompositionProviderCannotBeNull">
            <summary>
              Looks up a localized string similar to Null is not a valid CompositionProvider..
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.CompositionProviderNotConfigured">
            <summary>
              Looks up a localized string similar to You must first set a valid CompositionProvider by using Composition.SetProvider..
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.ConnectionOptionsNameMissmatch">
            <summary>
              Looks up a localized string similar to The name of the ConnectionOptions returned by IConnectionOptionsResolver: {0} does not match the value of the name parameter: {1}..
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.ConnectionOptionsNoNameYet">
            <summary>
              Looks up a localized string similar to The current ConnectionOptions doesn&apos;t have a name yet. Use WithName to assign a name..
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.ConnectionOptionsNotFound">
            <summary>
              Looks up a localized string similar to Unable to find ConnectionOptions with the name: {0}..
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.CouldNotDetermineTypeNameOfInstance">
            <summary>
              Looks up a localized string similar to Could not determine type name of instance.
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.CouldNotLocateAnyInstancesOfContract">
            <summary>
              Looks up a localized string similar to Could not locate any instances of contract {0}..
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.CreatingEntityManagerDuringRecompositionNotAllowed">
            <summary>
              Looks up a localized string similar to Creating an EntityManager during recomposition is not allowed..
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.CurrentStateOnlySupportedInControls">
            <summary>
              Looks up a localized string similar to CurrentState is only supported in a Control type..
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.DefaultPasswordSalt">
            <summary>
              Looks up a localized string similar to unlock leaven fox octave fierce embalm navel jollily vessel chisel ramp Susan faded toe.
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.DictionaryIsReadOnly">
            <summary>
              Looks up a localized string similar to This dictionary is read-only..
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.Ignore">
            <summary>
              Looks up a localized string similar to Ignore.
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.InvalidBinaryImageData">
            <summary>
              Looks up a localized string similar to Binary image data is neither jpeg nor png..
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.InvalidPassword">
            <summary>
              Looks up a localized string similar to Invalid Password!.
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.InvalidUseOfExpiredEntityManager">
            <summary>
              Looks up a localized string similar to Invalid use of expired EntityManager. The application&apos;s principal has changed since this EntityManager was last used. Tip: Do not keep references to EntityManagers. Instead, always obtain the current EntityManager through IEntityManagerProvider&lt;T&gt;.Manager..
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.KeyIsAlreadyPresentInThisDictionary">
            <summary>
              Looks up a localized string similar to Key is already present in this dictionary.
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.LogoutFailed">
            <summary>
              Looks up a localized string similar to Logout failed with the following error: {0}. Error was ignored..
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.ManagerTriedToFetchData">
            <summary>
              Looks up a localized string similar to Manager tried to fetch data..
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.ManagerTriedToSaveData">
            <summary>
              Looks up a localized string similar to Manager tried to save data..
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.MissingDefaultConstructor">
            <summary>
              Looks up a localized string similar to Unable to create a new instance of {0}. The type does not have a parameterless constructor..
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.MissingEntityManagerConstructor">
            <summary>
              Looks up a localized string similar to Unable to create an instance of EntityManager: {0}. Required constructor not found. Please add the following constructor: public {0}(IdeaBlade.EntityModel.EntityManagerContext)..
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.NavigationNotInValidState">
            <summary>
              Looks up a localized string similar to The navigation is not in a valid state to be started..
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.NavigationServiceDoesNotManageHistory">
            <summary>
              Looks up a localized string similar to The current NavigationService doesn&apos;t manage its own navigation history..
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.No">
            <summary>
              Looks up a localized string similar to No.
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.NoEntityManagerProviderFound">
            <summary>
              Looks up a localized string similar to No EntityManagerProvider found..
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.NoExportFound">
            <summary>
              Looks up a localized string similar to No export found for {0}.
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.NoMatchingAddWatch">
            <summary>
              Looks up a localized string similar to RemoveWatch was called without a matching AddWatch call..
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.NonSuitableEmpForFakeStoreOperation">
            <summary>
              Looks up a localized string similar to Attempted to initialize or reset the fake backing store on a non-suitable EntityManagerProvider. Ensure that the EntityManagerProvider uses the correct ConnectionOptions..
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.NoParameterlessCtor">
            <summary>
              Looks up a localized string similar to No parameterless constructor defined for this object..
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.Ok">
            <summary>
              Looks up a localized string similar to Ok.
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.PageChangeInProgress">
            <summary>
              Looks up a localized string similar to Another page change is in progress. You must wait before attempting another page change..
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.PendingNavigation">
            <summary>
              Looks up a localized string similar to Another navigation is pending..
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.ProbedForEntityManagerDelegateAndFoundMatch">
            <summary>
              Looks up a localized string similar to Probed for EntityManagerDelegate and found {0} matchting exports..
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.ProbedForEntityManagerDelegateAndFoundNoMatch">
            <summary>
              Looks up a localized string similar to Probed for EntityManagerDelegate and found no matchting exports..
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.ProbedForIValidationErrorNotificationAndFoundMatch">
            <summary>
              Looks up a localized string similar to Probed for IValidationErrorNotification and found {0} matchting exports..
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.ProbedForIValidationErrorNotificationAndFoundNoMatch">
            <summary>
              Looks up a localized string similar to Probed for IValidationErrorNotification and found no matching exports. Will be throwing an exception if validation errors occur..
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.ProbedForServiceAndFoundMatch">
            <summary>
              Looks up a localized string similar to Probed for service with contract {0} and found {1}.
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.ProbedForServiceAndFoundMultipleMatches">
            <summary>
              Looks up a localized string similar to Probed for service with contract {0} and found multiple matching exports.
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.ProbedForServiceFoundNoMatch">
            <summary>
              Looks up a localized string similar to Probed for service with contract {0} and found no matching exports.
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.Retry">
            <summary>
              Looks up a localized string similar to Retry.
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.ShouldHaveExactlyOneEntityErrorMessage">
            <summary>
              Looks up a localized string similar to Expected only one entity of type: {0}, with query: {1}, but found: {2}.
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.SuccessfullyCreatedEntityManager">
            <summary>
              Looks up a localized string similar to Successfully created new instance of EntityManager: {0} with connection info: {1}, IsFake={2}..
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.SuccessfullyLoggedIn">
            <summary>
              Looks up a localized string similar to Successfully performed user login with connection info: {0}, IsFake={1}..
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.TargetTypeMustBeImageSource">
            <summary>
              Looks up a localized string similar to Target type must be System.Windows.Media.ImageSource..
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.TheFakeStoreHasNotBeenInitialized">
            <summary>
              Looks up a localized string similar to The Fake Store has not been initialized..
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.ThisEntityManagerIsCurrentlyBusyWithAPreviousSaveChangeAsync">
            <summary>
              Looks up a localized string similar to This EntityManager is currently busy with a previous SaveChangeAsync call..
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.ViewNotFound">
            <summary>
              Looks up a localized string similar to No view was found for {0}. See the log for searched views..
            </summary>
        </member>
        <member name="P:Cocktail.StringResources.Yes">
            <summary>
              Looks up a localized string similar to Yes.
            </summary>
        </member>
        <member name="T:Cocktail.SyncDataMessage`1">
            <summary>
            Internal use.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Cocktail.SyncDataMessage`1.#ctor(Cocktail.IEntityManagerProvider{`0},System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{IdeaBlade.EntityModel.EntityKey})">
            <summary>Internal use.</summary>
        </member>
        <member name="M:Cocktail.SyncDataMessage`1.IsSameProviderAs(Cocktail.IEntityManagerProvider{`0})">
            <summary>Internal use.</summary>
        </member>
        <member name="P:Cocktail.SyncDataMessage`1.SavedEntities">
            <summary>Internal use.</summary>
        </member>
        <member name="P:Cocktail.SyncDataMessage`1.DeletedEntityKeys">
            <summary>Internal use.</summary>
        </member>
        <member name="T:Cocktail.TaskFns">
            <summary>
              A set of cross-platform static and extension methods that operate on <see cref="T:System.Threading.Tasks.Task"/> and <see cref="T:System.Threading.Tasks.Task`1"/>
            </summary>
        </member>
        <member name="M:Cocktail.TaskFns.FromResult``1(``0)">
            <summary>
              Creates a <see cref="T:System.Threading.Tasks.Task`1"/> that's completed successfully with the specified result.
            </summary>
            <param name="resultValue"> The result value to store in the completed task. </param>
        </member>
        <member name="M:Cocktail.TaskFns.FromCallbackAction``1(System.Action{System.Action{``0}})">
            <summary>
              Creates a <see cref="T:System.Threading.Tasks.Task`1"/> from a callback action that completes when the callback is called.
            </summary>
            <param name="action"> The callback action. </param>
            <typeparam name="T"> The type of the callback result. </typeparam>
        </member>
        <member name="M:Cocktail.TaskFns.WhenAll(System.Threading.Tasks.Task[])">
            <summary>
            Creates a task that will complete when all of the provided collection of Tasks have completed
            </summary>
            <returns>A task that represents the completion of all of the supplied tasks.</returns>
        </member>
        <member name="M:Cocktail.TaskFns.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>
            Creates a task that will complete when all of the provided collection of Tasks have completed
            </summary>
            <returns>A task that represents the completion of all of the supplied tasks.</returns>
        </member>
        <member name="M:Cocktail.TaskFns.WhenAll``1(System.Threading.Tasks.Task{``0}[])">
            <summary>
            Creates a task that will complete when all of the provided collection of Tasks have completed
            </summary>
            <returns>A task that represents the completion of all of the supplied tasks.</returns>
        </member>
        <member name="M:Cocktail.TaskFns.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <summary>
            Creates a task that will complete when all of the provided collection of Tasks have completed
            </summary>
            <returns>A task that represents the completion of all of the supplied tasks.</returns>
        </member>
        <member name="M:Cocktail.TaskFns.WhenAny(System.Threading.Tasks.Task[])">
            <summary>
            Creates a task that will complete when any of the supplied tasks have completed.
            </summary>
            <returns>A task that represents the completion of one of the supplied tasks. The return Task's Result is the task that completed.</returns>
        </member>
        <member name="M:Cocktail.TaskFns.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>
            Creates a task that will complete when any of the supplied tasks have completed.
            </summary>
            <returns>A task that represents the completion of one of the supplied tasks. The return Task's Result is the task that completed.</returns>
        </member>
        <member name="M:Cocktail.TaskFns.WhenAny``1(System.Threading.Tasks.Task{``0}[])">
            <summary>
            Creates a task that will complete when any of the supplied tasks have completed.
            </summary>
            <returns>A task that represents the completion of one of the supplied tasks. The return Task's Result is the task that completed.</returns>
        </member>
        <member name="M:Cocktail.TaskFns.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <summary>
            Creates a task that will complete when any of the supplied tasks have completed.
            </summary>
            <returns>A task that represents the completion of one of the supplied tasks. The return Task's Result is the task that completed.</returns>
        </member>
        <member name="T:Cocktail.TraceLogger">
            <summary>The central logger used by Cocktail, DevForce and Caliburn.Micro.</summary>
            <remarks>
            The logging can be customized by setting the LogWriter delegate to a custom LogWriter.
            </remarks>
        </member>
        <member name="F:Cocktail.TraceLogger.LogWriter">
            <summary>Replaceable log writer.</summary>
            <remarks>See <see cref="M:Cocktail.TraceLogger.DefaultLogWriter(System.Object)"/> for an example.</remarks>
        </member>
        <member name="M:Cocktail.TraceLogger.IdeaBlade#Core#ITraceLogger#Log(System.Object)">
            <summary>
            Write a DevForce tracing message.
            </summary>
            <param name="message"/>
            <remarks>
            Calls originating from DevForce via DebugFns and TraceFns calls will pass a <see cref="T:IdeaBlade.Core.TraceMessage"/>
                        to the method.
            </remarks>
        </member>
        <member name="M:Cocktail.TraceLogger.DefaultLogWriter(System.Object)">
            <summary>
            Default log writer.
            </summary>
            <param name="message">
            Calls originating from DevForce via DebugFns and TraceFns calls will pass a <see cref="T:IdeaBlade.Core.TraceMessage"/> to the method.
            </param>
        </member>
        <member name="P:Cocktail.TraceLogger.IdeaBlade#Core#ITraceLogger#IsSingleThreaded">
            <summary>
            Whether logger can be called from multiple threads.
            </summary>
            <remarks>
            If single-threaded, calls to the Log method will be from a single thread.  If multi-threaded,
                        you must ensure that your logger is thread safe.
            </remarks>
        </member>
        <member name="T:Cocktail.TraceLoggerProvider">
            <summary>Internal use.</summary>
        </member>
        <member name="M:Cocktail.TraceLoggerProvider.IdeaBlade#Core#ITraceLoggerProvider#GetLogger">
            <summary>
            Return the <see cref="T:IdeaBlade.Core.ITraceLogger"/> to use for logging of debug and trace messages.
            </summary>
            <returns/>
        </member>
        <member name="T:Cocktail.UnitOfWork">
            <summary>
              Base implementation of a unit of work.
            </summary>
        </member>
        <member name="M:Cocktail.UnitOfWork.#ctor(Cocktail.IEntityManagerProvider)">
            <summary>
              Creates a new unit of work.
            </summary>
            <param name="entityManagerProvider"> The EntityMangerProvider to be used to obtain an EntityManager. </param>
        </member>
        <member name="M:Cocktail.UnitOfWork.Clear">
            <summary>
            Resets the UnitOfWork to its initial state.
            </summary>
        </member>
        <member name="M:Cocktail.UnitOfWork.HasChanges">
            <summary>
              Returns true if the unit of work contains pending changes.
            </summary>
        </member>
        <member name="M:Cocktail.UnitOfWork.HasEntity(System.Object)">
            <summary>
            Returns true if the provided entity is attached to the current UnitOfWork's EntityManager.
            </summary>
            <param name="entity">Entity to check if attached to current UnitOfWork.</param>
        </member>
        <member name="M:Cocktail.UnitOfWork.CommitAsync">
            <summary>
              Commits all pending changes to the underlying data source.
            </summary>
        </member>
        <member name="M:Cocktail.UnitOfWork.Rollback">
            <summary>
              Rolls back all pending changes.
            </summary>
        </member>
        <member name="P:Cocktail.UnitOfWork.EntityManager">
            <summary>
              Returns the EntityManager used by this unit of work.
            </summary>
        </member>
        <member name="E:Cocktail.UnitOfWork.EntityChanged">
            <summary>
              Fired whenever an entity associated with the current unit of work has changed in any significant manner.
            </summary>
        </member>
        <member name="T:Cocktail.UnitOfWork`1">
            <summary>
              A simple unit of work implementation for a single entity type.
            </summary>
            <typeparam name="T"> The type of entity. </typeparam>
        </member>
        <member name="M:Cocktail.UnitOfWork`1.#ctor(Cocktail.IEntityManagerProvider)">
            <summary>
              Creates a new unit of work.
            </summary>
            <param name="entityManagerProvider"> The EntityMangerProvider to be used to obtain an EntityManager. </param>
        </member>
        <member name="P:Cocktail.UnitOfWork`1.Factory">
            <summary>
              The factory to create new entity instances.
            </summary>
        </member>
        <member name="P:Cocktail.UnitOfWork`1.Entities">
            <summary>
              The repository to retrieve entities.
            </summary>
        </member>
        <member name="T:Cocktail.ValueConverterConvention">
            <summary>
            A convention for applying a <see cref="P:Cocktail.ValueConverterConvention.Converter"/> to a binding when
            the binding matches the convention's <see cref="P:Cocktail.ValueConverterConvention.Filter"/>
            </summary>
            <remarks>
            See <see cref="T:Cocktail.PathToImageSourceConverter"/> for an example.
            These conventions should be registered with the
            <see cref="T:Cocktail.ValueConverterConventionRegistry"/>.
            </remarks>
        </member>
        <member name="M:Cocktail.ValueConverterConvention.#ctor(System.Windows.Data.IValueConverter,System.Func{System.Windows.DependencyProperty,System.Reflection.PropertyInfo,System.Boolean})">
            <summary>
            Constructor 
            </summary>
            <param name="converter"></param>
            <param name="filter"></param>
        </member>
        <member name="P:Cocktail.ValueConverterConvention.Converter">
            <summary>
            <see cref="T:System.Windows.Data.IValueConverter"/> to use when the binding passes the <see cref="P:Cocktail.ValueConverterConvention.Filter"/>
            </summary>
        </member>
        <member name="P:Cocktail.ValueConverterConvention.Filter">
            <summary>
            Filter function returns true if the binding is appropriate for this <see cref="P:Cocktail.ValueConverterConvention.Converter"/>.
            </summary>
            <remarks>
            Binding appropriateness determined by the binding property and the data property.
            See <see cref="T:Cocktail.PathToImageSourceConverter"/> for an example.
            </remarks>
        </member>
        <member name="T:Cocktail.ValueConverterConventionRegistry">
            <summary>
            A static registry of <see cref="T:Cocktail.ValueConverterConvention"/>s that are
            added to the Caliburn <see cref="T:Caliburn.Micro.ConventionManager"/>.
            </summary>
            <remarks>
            Registered conventions become part of the Caliburn.Micro conventions when 
            <see cref="M:Cocktail.ValueConverterConventionRegistry.AddConventionsToConventionManager"/> is called
            as it is in the <see cref="T:Cocktail.CocktailMefBootstrapper"/>.
            <para>
            You can continue adding conventions after adding the ConventionRegistry 
            to the Caliburn conventions.
            </para>
            </remarks>
        </member>
        <member name="M:Cocktail.ValueConverterConventionRegistry.AddConventionsToConventionManager">
            <summary>
            Add Cocktail ValueConverter conventions to the Caliburn <see cref="T:Caliburn.Micro.ConventionManager"/>.
            </summary>
            <remarks>Harmless to call twice because only adds once.</remarks>
        </member>
        <member name="M:Cocktail.ValueConverterConventionRegistry.RegisterConvention(System.Windows.Data.IValueConverter,System.Windows.DependencyProperty,System.Type)">
            <summary>
            Creates a <see cref="T:Cocktail.ValueConverterConvention"/> and adds it to the registry.
            Creates a convention for a <see cref="T:System.Windows.Data.IValueConverter"/> with a <see cref="P:Cocktail.ValueConverterConvention.Filter"/> 
            that matches the binding's
            <cref param="bindableProperty"/> and <cref param="dataPropertyType"/> exactly.
            </summary>
            <param name="converter">The converter instance returned by the <see cref="T:Cocktail.ValueConverterConvention"/>.</param>
            <param name="bindableProperty">The binding property to which this converter applies.</param>
            <param name="dataPropertyType">The type of the data property that this converter can convert.</param>
            <remarks>
            See <see cref="T:Cocktail.PathToImageSourceConverter"/> for an example.
            </remarks>
        </member>
        <member name="M:Cocktail.ValueConverterConventionRegistry.RegisterConvention(Cocktail.ValueConverterConvention)">
            <summary>
            Add a <see cref="T:Cocktail.ValueConverterConvention"/> to the registry
            </summary>
        </member>
        <member name="P:Cocktail.ValueConverterConventionRegistry.HaveAddedToConventionManager">
            <summary>
            Get if the conventions have already been added to the <see cref="T:Caliburn.Micro.ConventionManager"/>
            </summary>
        </member>
        <member name="P:Cocktail.ValueConverterConventionRegistry.GetConventions">
            <summary>
            Get the registered <see cref="T:Cocktail.ValueConverterConvention"/>s.
            </summary>
        </member>
        <member name="T:Cocktail.VisualStates">
            <summary>Maintains a <see cref="T:System.Windows.VisualStateManager"/>'s 
            current state via a binding to the "CurrentState" attached property</summary>
            <remarks>Thanks to Alex van Beek for original "VisualStates" version at
            from http://blogs.infosupport.com/silverlight-4-using-the-visualstatemanager-for-state-animations-with-mvvm/
            <para>
            In the example, the Grid's VSM state is maintained by the "MoodState" property
            of the data bound source, typically a ViewModel.
            </para></remarks>
            <example>
            	<code title="Example" description="" lang="XAML">
            &lt;Grid cocktail:VisualStates.CurrentState="{Binding MoodState}" /&gt;</code>
            </example>
        </member>
        <member name="F:Cocktail.VisualStates.CurrentStateProperty">
            <summary>Hold the intended current state of a control's <see cref="T:System.Windows.VisualStateManager"/></summary>
        </member>
        <member name="M:Cocktail.VisualStates.GetCurrentState(System.Windows.DependencyObject)">
            <summary>Get the intended current state of a control's <see cref="T:System.Windows.VisualStateManager"/></summary>
        </member>
        <member name="M:Cocktail.VisualStates.SetCurrentState(System.Windows.DependencyObject,System.String)">
            <summary>Set the intended current state of a control's <see cref="T:System.Windows.VisualStateManager"/></summary>
        </member>
        <member name="T:Cocktail.WeakRefDictionary`2">
            <summary>
            Represents a dictionary which stores the values as weak references instead of strong
            references. Null values are supported.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Cocktail.WeakRefDictionary`2.Add(`0,`1)">
            <summary>
            Adds a new item to the dictionary.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Cocktail.WeakRefDictionary`2.ContainsKey(`0)">
            <summary>
            Determines if the dictionary contains a value for the key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Cocktail.WeakRefDictionary`2.GetEnumerator">
            <summary>
            Gets an enumerator over the values in the dictionary.
            </summary>
            <returns>The enumerator.</returns>
            <remarks>As objects are discovered and returned from the enumerator, a strong reference
            is temporarily held on the object so that it will continue to exist for the duration of
            the enumeration. Once the enumeration of that object is over, the strong reference is
            removed. If you wish to keep values alive for use after enumeration, to ensure that they
            stay alive, you should store strong references to them during enumeration.</remarks>
        </member>
        <member name="M:Cocktail.WeakRefDictionary`2.Remove(`0)">
            <summary>
            Removes an item from the dictionary.
            </summary>
            <param name="key">The key of the item to be removed.</param>
            <returns>Returns true if the key was in the dictionary; return false otherwise.</returns>
        </member>
        <member name="M:Cocktail.WeakRefDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Attempts to get a value from the dictionary.
            </summary>
            <param name="key">The key</param>
            <param name="value">The value</param>
            <returns>Returns true if the value was present; false otherwise.</returns>
        </member>
        <member name="M:Cocktail.WeakRefDictionary`2.Clear">
            <summary>Removes all keys and values from the Dictionary.</summary>
        </member>
        <member name="M:Cocktail.WeakRefDictionary`2.CleanIfNeeded">
            <summary>
            Perform cleanup if GC occurred
            </summary>
        </member>
        <member name="F:Cocktail.WeakRefDictionary`2._gcSentinal">
            <summary>
            Serves as a simple "GC Monitor" that indicates whether cleanup is needed. 
            If _gcSentinal.IsAlive is false, GC has occurred and we should perform cleanup
            </summary>
        </member>
        <member name="P:Cocktail.WeakRefDictionary`2.Item(`0)">
            <summary>
            Retrieves a value from the dictionary.
            </summary>
            <param name="key">The key to look for.</param>
            <returns>The value in the dictionary.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when the key does exist in the dictionary.
            Since the dictionary contains weak references, the key may have been removed by the
            garbage collection of the object.</exception>
        </member>
        <member name="P:Cocktail.WeakRefDictionary`2.Count">
            <summary>
            Returns a count of the number of items in the dictionary.
            </summary>
            <remarks>Since the items in the dictionary are held by weak reference, the count value
            cannot be relied upon to guarantee the number of objects that would be discovered via
            enumeration. Treat the Count as an estimate only.  This property also has the side effect 
            of clearing out any GC'd refs.</remarks>
        </member>
    </members>
</doc>
